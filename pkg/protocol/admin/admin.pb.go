

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.0
// source: admin/admin.proto

package admin

import (
	context "context"
	common "github.com/openimsdk/chat/pkg/protocol/common"
	sdkws "github.com/openimsdk/protocol/sdkws"
	wrapperspb "github.com/openimsdk/protocol/wrapperspb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// login
type LoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  string `protobuf:"bytes,1,opt,name=account,proto3" json:"account"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password"`
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{0}
}

func (x *LoginReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *LoginReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LoginResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminAccount string `protobuf:"bytes,1,opt,name=adminAccount,proto3" json:"adminAccount"`
	AdminToken   string `protobuf:"bytes,2,opt,name=adminToken,proto3" json:"adminToken"`
	Nickname     string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname"`
	FaceURL      string `protobuf:"bytes,4,opt,name=faceURL,proto3" json:"faceURL"`
	Level        int32  `protobuf:"varint,5,opt,name=level,proto3" json:"level"`
	AdminUserID  string `protobuf:"bytes,6,opt,name=adminUserID,proto3" json:"adminUserID"`
}

func (x *LoginResp) Reset() {
	*x = LoginResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResp) ProtoMessage() {}

func (x *LoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResp.ProtoReflect.Descriptor instead.
func (*LoginResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{1}
}

func (x *LoginResp) GetAdminAccount() string {
	if x != nil {
		return x.AdminAccount
	}
	return ""
}

func (x *LoginResp) GetAdminToken() string {
	if x != nil {
		return x.AdminToken
	}
	return ""
}

func (x *LoginResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *LoginResp) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *LoginResp) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *LoginResp) GetAdminUserID() string {
	if x != nil {
		return x.AdminUserID
	}
	return ""
}

type AddAdminAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  string `protobuf:"bytes,1,opt,name=account,proto3" json:"account"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password"`
	FaceURL  string `protobuf:"bytes,3,opt,name=faceURL,proto3" json:"faceURL"`
	Nickname string `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname"`
}

func (x *AddAdminAccountReq) Reset() {
	*x = AddAdminAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAdminAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAdminAccountReq) ProtoMessage() {}

func (x *AddAdminAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAdminAccountReq.ProtoReflect.Descriptor instead.
func (*AddAdminAccountReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{2}
}

func (x *AddAdminAccountReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AddAdminAccountReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AddAdminAccountReq) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *AddAdminAccountReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type AddAdminAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddAdminAccountResp) Reset() {
	*x = AddAdminAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAdminAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAdminAccountResp) ProtoMessage() {}

func (x *AddAdminAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAdminAccountResp.ProtoReflect.Descriptor instead.
func (*AddAdminAccountResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{3}
}

type AdminUpdateInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=account,proto3" json:"account"`
	Password *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=password,proto3" json:"password"`
	FaceURL  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=faceURL,proto3" json:"faceURL"`
	Nickname *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname"`
	Level    *wrapperspb.Int32Value  `protobuf:"bytes,6,opt,name=level,proto3" json:"level"`
}

func (x *AdminUpdateInfoReq) Reset() {
	*x = AdminUpdateInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateInfoReq) ProtoMessage() {}

func (x *AdminUpdateInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateInfoReq.ProtoReflect.Descriptor instead.
func (*AdminUpdateInfoReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{4}
}

func (x *AdminUpdateInfoReq) GetAccount() *wrapperspb.StringValue {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *AdminUpdateInfoReq) GetPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *AdminUpdateInfoReq) GetFaceURL() *wrapperspb.StringValue {
	if x != nil {
		return x.FaceURL
	}
	return nil
}

func (x *AdminUpdateInfoReq) GetNickname() *wrapperspb.StringValue {
	if x != nil {
		return x.Nickname
	}
	return nil
}

func (x *AdminUpdateInfoReq) GetLevel() *wrapperspb.Int32Value {
	if x != nil {
		return x.Level
	}
	return nil
}

type AdminUpdateInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname"`
	FaceURL  string `protobuf:"bytes,3,opt,name=faceURL,proto3" json:"faceURL"`
}

func (x *AdminUpdateInfoResp) Reset() {
	*x = AdminUpdateInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateInfoResp) ProtoMessage() {}

func (x *AdminUpdateInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateInfoResp.ProtoReflect.Descriptor instead.
func (*AdminUpdateInfoResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{5}
}

func (x *AdminUpdateInfoResp) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *AdminUpdateInfoResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *AdminUpdateInfoResp) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

type ChangePasswordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password"`
}

func (x *ChangePasswordReq) Reset() {
	*x = ChangePasswordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordReq) ProtoMessage() {}

func (x *ChangePasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordReq.ProtoReflect.Descriptor instead.
func (*ChangePasswordReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{6}
}

func (x *ChangePasswordReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ChangePasswordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangePasswordResp) Reset() {
	*x = ChangePasswordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePasswordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordResp) ProtoMessage() {}

func (x *ChangePasswordResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordResp.ProtoReflect.Descriptor instead.
func (*ChangePasswordResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{7}
}

type GetAdminInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAdminInfoReq) Reset() {
	*x = GetAdminInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdminInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminInfoReq) ProtoMessage() {}

func (x *GetAdminInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminInfoReq.ProtoReflect.Descriptor instead.
func (*GetAdminInfoReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{8}
}

type ChangeAdminPasswordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	CurrentPassword string `protobuf:"bytes,2,opt,name=currentPassword,proto3" json:"currentPassword"`
	NewPassword     string `protobuf:"bytes,3,opt,name=newPassword,proto3" json:"newPassword"`
}

func (x *ChangeAdminPasswordReq) Reset() {
	*x = ChangeAdminPasswordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeAdminPasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAdminPasswordReq) ProtoMessage() {}

func (x *ChangeAdminPasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAdminPasswordReq.ProtoReflect.Descriptor instead.
func (*ChangeAdminPasswordReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{9}
}

func (x *ChangeAdminPasswordReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ChangeAdminPasswordReq) GetCurrentPassword() string {
	if x != nil {
		return x.CurrentPassword
	}
	return ""
}

func (x *ChangeAdminPasswordReq) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type ChangeAdminPasswordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangeAdminPasswordResp) Reset() {
	*x = ChangeAdminPasswordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeAdminPasswordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAdminPasswordResp) ProtoMessage() {}

func (x *ChangeAdminPasswordResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAdminPasswordResp.ProtoReflect.Descriptor instead.
func (*ChangeAdminPasswordResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{10}
}

type DelAdminAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs"`
}

func (x *DelAdminAccountReq) Reset() {
	*x = DelAdminAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelAdminAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAdminAccountReq) ProtoMessage() {}

func (x *DelAdminAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAdminAccountReq.ProtoReflect.Descriptor instead.
func (*DelAdminAccountReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{11}
}

func (x *DelAdminAccountReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type DelAdminAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelAdminAccountResp) Reset() {
	*x = DelAdminAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelAdminAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAdminAccountResp) ProtoMessage() {}

func (x *DelAdminAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAdminAccountResp.ProtoReflect.Descriptor instead.
func (*DelAdminAccountResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{12}
}

type SearchAdminAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
}

func (x *SearchAdminAccountReq) Reset() {
	*x = SearchAdminAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAdminAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAdminAccountReq) ProtoMessage() {}

func (x *SearchAdminAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAdminAccountReq.ProtoReflect.Descriptor instead.
func (*SearchAdminAccountReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{13}
}

func (x *SearchAdminAccountReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type SearchAdminAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total         uint32              `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	AdminAccounts []*GetAdminInfoResp `protobuf:"bytes,2,rep,name=adminAccounts,proto3" json:"adminAccounts"`
}

func (x *SearchAdminAccountResp) Reset() {
	*x = SearchAdminAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAdminAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAdminAccountResp) ProtoMessage() {}

func (x *SearchAdminAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAdminAccountResp.ProtoReflect.Descriptor instead.
func (*SearchAdminAccountResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{14}
}

func (x *SearchAdminAccountResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchAdminAccountResp) GetAdminAccounts() []*GetAdminInfoResp {
	if x != nil {
		return x.AdminAccounts
	}
	return nil
}

type GetAdminInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account    string `protobuf:"bytes,2,opt,name=account,proto3" json:"account"`
	Password   string `protobuf:"bytes,3,opt,name=password,proto3" json:"password"`
	FaceURL    string `protobuf:"bytes,4,opt,name=faceURL,proto3" json:"faceURL"`
	Nickname   string `protobuf:"bytes,5,opt,name=nickname,proto3" json:"nickname"`
	UserID     string `protobuf:"bytes,6,opt,name=userID,proto3" json:"userID"`
	Level      int32  `protobuf:"varint,7,opt,name=level,proto3" json:"level"`
	CreateTime int64  `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime"`
}

func (x *GetAdminInfoResp) Reset() {
	*x = GetAdminInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdminInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminInfoResp) ProtoMessage() {}

func (x *GetAdminInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminInfoResp.ProtoReflect.Descriptor instead.
func (*GetAdminInfoResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{15}
}

func (x *GetAdminInfoResp) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *GetAdminInfoResp) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *GetAdminInfoResp) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *GetAdminInfoResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *GetAdminInfoResp) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetAdminInfoResp) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GetAdminInfoResp) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type AddDefaultFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs"`
}

func (x *AddDefaultFriendReq) Reset() {
	*x = AddDefaultFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDefaultFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDefaultFriendReq) ProtoMessage() {}

func (x *AddDefaultFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDefaultFriendReq.ProtoReflect.Descriptor instead.
func (*AddDefaultFriendReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{16}
}

func (x *AddDefaultFriendReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type AddDefaultFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddDefaultFriendResp) Reset() {
	*x = AddDefaultFriendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDefaultFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDefaultFriendResp) ProtoMessage() {}

func (x *AddDefaultFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDefaultFriendResp.ProtoReflect.Descriptor instead.
func (*AddDefaultFriendResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{17}
}

type DelDefaultFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs"`
}

func (x *DelDefaultFriendReq) Reset() {
	*x = DelDefaultFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelDefaultFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelDefaultFriendReq) ProtoMessage() {}

func (x *DelDefaultFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelDefaultFriendReq.ProtoReflect.Descriptor instead.
func (*DelDefaultFriendReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{18}
}

func (x *DelDefaultFriendReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type DelDefaultFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelDefaultFriendResp) Reset() {
	*x = DelDefaultFriendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelDefaultFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelDefaultFriendResp) ProtoMessage() {}

func (x *DelDefaultFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelDefaultFriendResp.ProtoReflect.Descriptor instead.
func (*DelDefaultFriendResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{19}
}

type FindDefaultFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindDefaultFriendReq) Reset() {
	*x = FindDefaultFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDefaultFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDefaultFriendReq) ProtoMessage() {}

func (x *FindDefaultFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDefaultFriendReq.ProtoReflect.Descriptor instead.
func (*FindDefaultFriendReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{20}
}

type FindDefaultFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs"`
}

func (x *FindDefaultFriendResp) Reset() {
	*x = FindDefaultFriendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDefaultFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDefaultFriendResp) ProtoMessage() {}

func (x *FindDefaultFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDefaultFriendResp.ProtoReflect.Descriptor instead.
func (*FindDefaultFriendResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{21}
}

func (x *FindDefaultFriendResp) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type SearchDefaultFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    string                   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword"`
	Pagination *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
}

func (x *SearchDefaultFriendReq) Reset() {
	*x = SearchDefaultFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDefaultFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDefaultFriendReq) ProtoMessage() {}

func (x *SearchDefaultFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDefaultFriendReq.ProtoReflect.Descriptor instead.
func (*SearchDefaultFriendReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{22}
}

func (x *SearchDefaultFriendReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchDefaultFriendReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type DefaultFriendAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	CreateTime int64                  `protobuf:"varint,2,opt,name=createTime,proto3" json:"createTime"`
	User       *common.UserPublicInfo `protobuf:"bytes,3,opt,name=user,proto3" json:"user"`
}

func (x *DefaultFriendAttribute) Reset() {
	*x = DefaultFriendAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultFriendAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultFriendAttribute) ProtoMessage() {}

func (x *DefaultFriendAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultFriendAttribute.ProtoReflect.Descriptor instead.
func (*DefaultFriendAttribute) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{23}
}

func (x *DefaultFriendAttribute) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *DefaultFriendAttribute) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *DefaultFriendAttribute) GetUser() *common.UserPublicInfo {
	if x != nil {
		return x.User
	}
	return nil
}

type SearchDefaultFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint32                    `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Users []*DefaultFriendAttribute `protobuf:"bytes,2,rep,name=users,proto3" json:"users"`
}

func (x *SearchDefaultFriendResp) Reset() {
	*x = SearchDefaultFriendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDefaultFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDefaultFriendResp) ProtoMessage() {}

func (x *SearchDefaultFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDefaultFriendResp.ProtoReflect.Descriptor instead.
func (*SearchDefaultFriendResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{24}
}

func (x *SearchDefaultFriendResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchDefaultFriendResp) GetUsers() []*DefaultFriendAttribute {
	if x != nil {
		return x.Users
	}
	return nil
}

type AddDefaultGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupIDs []string `protobuf:"bytes,1,rep,name=groupIDs,proto3" json:"groupIDs"`
}

func (x *AddDefaultGroupReq) Reset() {
	*x = AddDefaultGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDefaultGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDefaultGroupReq) ProtoMessage() {}

func (x *AddDefaultGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDefaultGroupReq.ProtoReflect.Descriptor instead.
func (*AddDefaultGroupReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{25}
}

func (x *AddDefaultGroupReq) GetGroupIDs() []string {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

type AddDefaultGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddDefaultGroupResp) Reset() {
	*x = AddDefaultGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDefaultGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDefaultGroupResp) ProtoMessage() {}

func (x *AddDefaultGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDefaultGroupResp.ProtoReflect.Descriptor instead.
func (*AddDefaultGroupResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{26}
}

type DelDefaultGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupIDs []string `protobuf:"bytes,1,rep,name=groupIDs,proto3" json:"groupIDs"`
}

func (x *DelDefaultGroupReq) Reset() {
	*x = DelDefaultGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelDefaultGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelDefaultGroupReq) ProtoMessage() {}

func (x *DelDefaultGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelDefaultGroupReq.ProtoReflect.Descriptor instead.
func (*DelDefaultGroupReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{27}
}

func (x *DelDefaultGroupReq) GetGroupIDs() []string {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

type DelDefaultGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelDefaultGroupResp) Reset() {
	*x = DelDefaultGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelDefaultGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelDefaultGroupResp) ProtoMessage() {}

func (x *DelDefaultGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelDefaultGroupResp.ProtoReflect.Descriptor instead.
func (*DelDefaultGroupResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{28}
}

type FindDefaultGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindDefaultGroupReq) Reset() {
	*x = FindDefaultGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDefaultGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDefaultGroupReq) ProtoMessage() {}

func (x *FindDefaultGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDefaultGroupReq.ProtoReflect.Descriptor instead.
func (*FindDefaultGroupReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{29}
}

type FindDefaultGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupIDs []string `protobuf:"bytes,1,rep,name=groupIDs,proto3" json:"groupIDs"`
}

func (x *FindDefaultGroupResp) Reset() {
	*x = FindDefaultGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDefaultGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDefaultGroupResp) ProtoMessage() {}

func (x *FindDefaultGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDefaultGroupResp.ProtoReflect.Descriptor instead.
func (*FindDefaultGroupResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{30}
}

func (x *FindDefaultGroupResp) GetGroupIDs() []string {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

type SearchDefaultGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    string                   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword"`
	Pagination *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
}

func (x *SearchDefaultGroupReq) Reset() {
	*x = SearchDefaultGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDefaultGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDefaultGroupReq) ProtoMessage() {}

func (x *SearchDefaultGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDefaultGroupReq.ProtoReflect.Descriptor instead.
func (*SearchDefaultGroupReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{31}
}

func (x *SearchDefaultGroupReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchDefaultGroupReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GroupAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID    string           `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID"`
	CreateTime int64            `protobuf:"varint,2,opt,name=createTime,proto3" json:"createTime"`
	Group      *sdkws.GroupInfo `protobuf:"bytes,3,opt,name=group,proto3" json:"group"`
}

func (x *GroupAttribute) Reset() {
	*x = GroupAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupAttribute) ProtoMessage() {}

func (x *GroupAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupAttribute.ProtoReflect.Descriptor instead.
func (*GroupAttribute) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{32}
}

func (x *GroupAttribute) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *GroupAttribute) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GroupAttribute) GetGroup() *sdkws.GroupInfo {
	if x != nil {
		return x.Group
	}
	return nil
}

type SearchDefaultGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    uint32   `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	GroupIDs []string `protobuf:"bytes,2,rep,name=groupIDs,proto3" json:"groupIDs"`
}

func (x *SearchDefaultGroupResp) Reset() {
	*x = SearchDefaultGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDefaultGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDefaultGroupResp) ProtoMessage() {}

func (x *SearchDefaultGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDefaultGroupResp.ProtoReflect.Descriptor instead.
func (*SearchDefaultGroupResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{33}
}

func (x *SearchDefaultGroupResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchDefaultGroupResp) GetGroupIDs() []string {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

type AddInvitationCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codes []string `protobuf:"bytes,1,rep,name=codes,proto3" json:"codes"`
}

func (x *AddInvitationCodeReq) Reset() {
	*x = AddInvitationCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInvitationCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInvitationCodeReq) ProtoMessage() {}

func (x *AddInvitationCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInvitationCodeReq.ProtoReflect.Descriptor instead.
func (*AddInvitationCodeReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{34}
}

func (x *AddInvitationCodeReq) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

type AddInvitationCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddInvitationCodeResp) Reset() {
	*x = AddInvitationCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInvitationCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInvitationCodeResp) ProtoMessage() {}

func (x *AddInvitationCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInvitationCodeResp.ProtoReflect.Descriptor instead.
func (*AddInvitationCodeResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{35}
}

type GenInvitationCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Len   int32  `protobuf:"varint,1,opt,name=len,proto3" json:"len"`
	Num   int32  `protobuf:"varint,2,opt,name=num,proto3" json:"num"`
	Chars string `protobuf:"bytes,3,opt,name=chars,proto3" json:"chars"`
}

func (x *GenInvitationCodeReq) Reset() {
	*x = GenInvitationCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenInvitationCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenInvitationCodeReq) ProtoMessage() {}

func (x *GenInvitationCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenInvitationCodeReq.ProtoReflect.Descriptor instead.
func (*GenInvitationCodeReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{36}
}

func (x *GenInvitationCodeReq) GetLen() int32 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *GenInvitationCodeReq) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *GenInvitationCodeReq) GetChars() string {
	if x != nil {
		return x.Chars
	}
	return ""
}

type GenInvitationCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GenInvitationCodeResp) Reset() {
	*x = GenInvitationCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenInvitationCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenInvitationCodeResp) ProtoMessage() {}

func (x *GenInvitationCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenInvitationCodeResp.ProtoReflect.Descriptor instead.
func (*GenInvitationCodeResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{37}
}

type FindInvitationCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codes []string `protobuf:"bytes,1,rep,name=codes,proto3" json:"codes"`
}

func (x *FindInvitationCodeReq) Reset() {
	*x = FindInvitationCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindInvitationCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindInvitationCodeReq) ProtoMessage() {}

func (x *FindInvitationCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindInvitationCodeReq.ProtoReflect.Descriptor instead.
func (*FindInvitationCodeReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{38}
}

func (x *FindInvitationCodeReq) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

type FindInvitationCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codes []*InvitationRegister `protobuf:"bytes,1,rep,name=codes,proto3" json:"codes"`
}

func (x *FindInvitationCodeResp) Reset() {
	*x = FindInvitationCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindInvitationCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindInvitationCodeResp) ProtoMessage() {}

func (x *FindInvitationCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindInvitationCodeResp.ProtoReflect.Descriptor instead.
func (*FindInvitationCodeResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{39}
}

func (x *FindInvitationCodeResp) GetCodes() []*InvitationRegister {
	if x != nil {
		return x.Codes
	}
	return nil
}

type UseInvitationCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   string `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`
	UserID string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
}

func (x *UseInvitationCodeReq) Reset() {
	*x = UseInvitationCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseInvitationCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseInvitationCodeReq) ProtoMessage() {}

func (x *UseInvitationCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseInvitationCodeReq.ProtoReflect.Descriptor instead.
func (*UseInvitationCodeReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{40}
}

func (x *UseInvitationCodeReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UseInvitationCodeReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type UseInvitationCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UseInvitationCodeResp) Reset() {
	*x = UseInvitationCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseInvitationCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseInvitationCodeResp) ProtoMessage() {}

func (x *UseInvitationCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseInvitationCodeResp.ProtoReflect.Descriptor instead.
func (*UseInvitationCodeResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{41}
}

type DelInvitationCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codes []string `protobuf:"bytes,1,rep,name=codes,proto3" json:"codes"`
}

func (x *DelInvitationCodeReq) Reset() {
	*x = DelInvitationCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelInvitationCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelInvitationCodeReq) ProtoMessage() {}

func (x *DelInvitationCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelInvitationCodeReq.ProtoReflect.Descriptor instead.
func (*DelInvitationCodeReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{42}
}

func (x *DelInvitationCodeReq) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

type DelInvitationCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelInvitationCodeResp) Reset() {
	*x = DelInvitationCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelInvitationCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelInvitationCodeResp) ProtoMessage() {}

func (x *DelInvitationCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelInvitationCodeResp.ProtoReflect.Descriptor instead.
func (*DelInvitationCodeResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{43}
}

type InvitationRegister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationCode string                 `protobuf:"bytes,1,opt,name=invitationCode,proto3" json:"invitationCode"`
	CreateTime     int64                  `protobuf:"varint,2,opt,name=createTime,proto3" json:"createTime"`
	UsedUserID     string                 `protobuf:"bytes,3,opt,name=usedUserID,proto3" json:"usedUserID"`
	UsedUser       *common.UserPublicInfo `protobuf:"bytes,4,opt,name=usedUser,proto3" json:"usedUser"`
}

func (x *InvitationRegister) Reset() {
	*x = InvitationRegister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvitationRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvitationRegister) ProtoMessage() {}

func (x *InvitationRegister) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvitationRegister.ProtoReflect.Descriptor instead.
func (*InvitationRegister) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{44}
}

func (x *InvitationRegister) GetInvitationCode() string {
	if x != nil {
		return x.InvitationCode
	}
	return ""
}

func (x *InvitationRegister) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *InvitationRegister) GetUsedUserID() string {
	if x != nil {
		return x.UsedUserID
	}
	return ""
}

func (x *InvitationRegister) GetUsedUser() *common.UserPublicInfo {
	if x != nil {
		return x.UsedUser
	}
	return nil
}

type SearchInvitationCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     int32                    `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	UserIDs    []string                 `protobuf:"bytes,2,rep,name=userIDs,proto3" json:"userIDs"`
	Codes      []string                 `protobuf:"bytes,3,rep,name=codes,proto3" json:"codes"`
	Keyword    string                   `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword"`
	Pagination *sdkws.RequestPagination `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination"`
}

func (x *SearchInvitationCodeReq) Reset() {
	*x = SearchInvitationCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInvitationCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInvitationCodeReq) ProtoMessage() {}

func (x *SearchInvitationCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInvitationCodeReq.ProtoReflect.Descriptor instead.
func (*SearchInvitationCodeReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{45}
}

func (x *SearchInvitationCodeReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SearchInvitationCodeReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

func (x *SearchInvitationCodeReq) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

func (x *SearchInvitationCodeReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchInvitationCodeReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type SearchInvitationCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint32                `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	List  []*InvitationRegister `protobuf:"bytes,2,rep,name=list,proto3" json:"list"`
}

func (x *SearchInvitationCodeResp) Reset() {
	*x = SearchInvitationCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInvitationCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInvitationCodeResp) ProtoMessage() {}

func (x *SearchInvitationCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInvitationCodeResp.ProtoReflect.Descriptor instead.
func (*SearchInvitationCodeResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{46}
}

func (x *SearchInvitationCodeResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchInvitationCodeResp) GetList() []*InvitationRegister {
	if x != nil {
		return x.List
	}
	return nil
}

type SearchUserIPLimitLoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    string                   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword"`
	Pagination *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
}

func (x *SearchUserIPLimitLoginReq) Reset() {
	*x = SearchUserIPLimitLoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserIPLimitLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserIPLimitLoginReq) ProtoMessage() {}

func (x *SearchUserIPLimitLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserIPLimitLoginReq.ProtoReflect.Descriptor instead.
func (*SearchUserIPLimitLoginReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{47}
}

func (x *SearchUserIPLimitLoginReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchUserIPLimitLoginReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type LimitUserLoginIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Ip         string                 `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip"`
	CreateTime int64                  `protobuf:"varint,3,opt,name=createTime,proto3" json:"createTime"`
	User       *common.UserPublicInfo `protobuf:"bytes,4,opt,name=user,proto3" json:"user"`
}

func (x *LimitUserLoginIP) Reset() {
	*x = LimitUserLoginIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitUserLoginIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitUserLoginIP) ProtoMessage() {}

func (x *LimitUserLoginIP) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitUserLoginIP.ProtoReflect.Descriptor instead.
func (*LimitUserLoginIP) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{48}
}

func (x *LimitUserLoginIP) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *LimitUserLoginIP) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *LimitUserLoginIP) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *LimitUserLoginIP) GetUser() *common.UserPublicInfo {
	if x != nil {
		return x.User
	}
	return nil
}

type SearchUserIPLimitLoginResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total  uint32              `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Limits []*LimitUserLoginIP `protobuf:"bytes,2,rep,name=limits,proto3" json:"limits"`
}

func (x *SearchUserIPLimitLoginResp) Reset() {
	*x = SearchUserIPLimitLoginResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserIPLimitLoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserIPLimitLoginResp) ProtoMessage() {}

func (x *SearchUserIPLimitLoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserIPLimitLoginResp.ProtoReflect.Descriptor instead.
func (*SearchUserIPLimitLoginResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{49}
}

func (x *SearchUserIPLimitLoginResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchUserIPLimitLoginResp) GetLimits() []*LimitUserLoginIP {
	if x != nil {
		return x.Limits
	}
	return nil
}

type UserIPLimitLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Ip     string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip"`
}

func (x *UserIPLimitLogin) Reset() {
	*x = UserIPLimitLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIPLimitLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIPLimitLogin) ProtoMessage() {}

func (x *UserIPLimitLogin) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIPLimitLogin.ProtoReflect.Descriptor instead.
func (*UserIPLimitLogin) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{50}
}

func (x *UserIPLimitLogin) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserIPLimitLogin) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type AddUserIPLimitLoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limits []*UserIPLimitLogin `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits"`
}

func (x *AddUserIPLimitLoginReq) Reset() {
	*x = AddUserIPLimitLoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserIPLimitLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserIPLimitLoginReq) ProtoMessage() {}

func (x *AddUserIPLimitLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserIPLimitLoginReq.ProtoReflect.Descriptor instead.
func (*AddUserIPLimitLoginReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{51}
}

func (x *AddUserIPLimitLoginReq) GetLimits() []*UserIPLimitLogin {
	if x != nil {
		return x.Limits
	}
	return nil
}

type AddUserIPLimitLoginResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddUserIPLimitLoginResp) Reset() {
	*x = AddUserIPLimitLoginResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserIPLimitLoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserIPLimitLoginResp) ProtoMessage() {}

func (x *AddUserIPLimitLoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserIPLimitLoginResp.ProtoReflect.Descriptor instead.
func (*AddUserIPLimitLoginResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{52}
}

type DelUserIPLimitLoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limits []*UserIPLimitLogin `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits"`
}

func (x *DelUserIPLimitLoginReq) Reset() {
	*x = DelUserIPLimitLoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelUserIPLimitLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUserIPLimitLoginReq) ProtoMessage() {}

func (x *DelUserIPLimitLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUserIPLimitLoginReq.ProtoReflect.Descriptor instead.
func (*DelUserIPLimitLoginReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{53}
}

func (x *DelUserIPLimitLoginReq) GetLimits() []*UserIPLimitLogin {
	if x != nil {
		return x.Limits
	}
	return nil
}

type DelUserIPLimitLoginResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelUserIPLimitLoginResp) Reset() {
	*x = DelUserIPLimitLoginResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelUserIPLimitLoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUserIPLimitLoginResp) ProtoMessage() {}

func (x *DelUserIPLimitLoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUserIPLimitLoginResp.ProtoReflect.Descriptor instead.
func (*DelUserIPLimitLoginResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{54}
}

type IPForbidden struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip            string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip"`
	LimitRegister bool   `protobuf:"varint,2,opt,name=limitRegister,proto3" json:"limitRegister"`
	LimitLogin    bool   `protobuf:"varint,3,opt,name=limitLogin,proto3" json:"limitLogin"`
	CreateTime    int64  `protobuf:"varint,4,opt,name=createTime,proto3" json:"createTime"`
}

func (x *IPForbidden) Reset() {
	*x = IPForbidden{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPForbidden) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPForbidden) ProtoMessage() {}

func (x *IPForbidden) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPForbidden.ProtoReflect.Descriptor instead.
func (*IPForbidden) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{55}
}

func (x *IPForbidden) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IPForbidden) GetLimitRegister() bool {
	if x != nil {
		return x.LimitRegister
	}
	return false
}

func (x *IPForbidden) GetLimitLogin() bool {
	if x != nil {
		return x.LimitLogin
	}
	return false
}

func (x *IPForbidden) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type IPForbiddenAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip            string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip"`
	LimitRegister bool   `protobuf:"varint,2,opt,name=limitRegister,proto3" json:"limitRegister"`
	LimitLogin    bool   `protobuf:"varint,3,opt,name=limitLogin,proto3" json:"limitLogin"`
}

func (x *IPForbiddenAdd) Reset() {
	*x = IPForbiddenAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPForbiddenAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPForbiddenAdd) ProtoMessage() {}

func (x *IPForbiddenAdd) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPForbiddenAdd.ProtoReflect.Descriptor instead.
func (*IPForbiddenAdd) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{56}
}

func (x *IPForbiddenAdd) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IPForbiddenAdd) GetLimitRegister() bool {
	if x != nil {
		return x.LimitRegister
	}
	return false
}

func (x *IPForbiddenAdd) GetLimitLogin() bool {
	if x != nil {
		return x.LimitLogin
	}
	return false
}

type SearchIPForbiddenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    string                   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword"`
	Status     int32                    `protobuf:"varint,2,opt,name=status,proto3" json:"status"`
	Pagination *sdkws.RequestPagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination"`
}

func (x *SearchIPForbiddenReq) Reset() {
	*x = SearchIPForbiddenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchIPForbiddenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchIPForbiddenReq) ProtoMessage() {}

func (x *SearchIPForbiddenReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchIPForbiddenReq.ProtoReflect.Descriptor instead.
func (*SearchIPForbiddenReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{57}
}

func (x *SearchIPForbiddenReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchIPForbiddenReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SearchIPForbiddenReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type SearchIPForbiddenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total      uint32         `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Forbiddens []*IPForbidden `protobuf:"bytes,2,rep,name=forbiddens,proto3" json:"forbiddens"`
}

func (x *SearchIPForbiddenResp) Reset() {
	*x = SearchIPForbiddenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchIPForbiddenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchIPForbiddenResp) ProtoMessage() {}

func (x *SearchIPForbiddenResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchIPForbiddenResp.ProtoReflect.Descriptor instead.
func (*SearchIPForbiddenResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{58}
}

func (x *SearchIPForbiddenResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchIPForbiddenResp) GetForbiddens() []*IPForbidden {
	if x != nil {
		return x.Forbiddens
	}
	return nil
}

type AddIPForbiddenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Forbiddens []*IPForbiddenAdd `protobuf:"bytes,1,rep,name=forbiddens,proto3" json:"forbiddens"`
}

func (x *AddIPForbiddenReq) Reset() {
	*x = AddIPForbiddenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIPForbiddenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIPForbiddenReq) ProtoMessage() {}

func (x *AddIPForbiddenReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIPForbiddenReq.ProtoReflect.Descriptor instead.
func (*AddIPForbiddenReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{59}
}

func (x *AddIPForbiddenReq) GetForbiddens() []*IPForbiddenAdd {
	if x != nil {
		return x.Forbiddens
	}
	return nil
}

type AddIPForbiddenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddIPForbiddenResp) Reset() {
	*x = AddIPForbiddenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIPForbiddenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIPForbiddenResp) ProtoMessage() {}

func (x *AddIPForbiddenResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIPForbiddenResp.ProtoReflect.Descriptor instead.
func (*AddIPForbiddenResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{60}
}

type DelIPForbiddenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ips []string `protobuf:"bytes,1,rep,name=ips,proto3" json:"ips"`
}

func (x *DelIPForbiddenReq) Reset() {
	*x = DelIPForbiddenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelIPForbiddenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelIPForbiddenReq) ProtoMessage() {}

func (x *DelIPForbiddenReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelIPForbiddenReq.ProtoReflect.Descriptor instead.
func (*DelIPForbiddenReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{61}
}

func (x *DelIPForbiddenReq) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type DelIPForbiddenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelIPForbiddenResp) Reset() {
	*x = DelIPForbiddenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelIPForbiddenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelIPForbiddenResp) ProtoMessage() {}

func (x *DelIPForbiddenResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelIPForbiddenResp.ProtoReflect.Descriptor instead.
func (*DelIPForbiddenResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{62}
}

// ################### user limit ###################
type CheckRegisterForbiddenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip"`
}

func (x *CheckRegisterForbiddenReq) Reset() {
	*x = CheckRegisterForbiddenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRegisterForbiddenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRegisterForbiddenReq) ProtoMessage() {}

func (x *CheckRegisterForbiddenReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRegisterForbiddenReq.ProtoReflect.Descriptor instead.
func (*CheckRegisterForbiddenReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{63}
}

func (x *CheckRegisterForbiddenReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type CheckRegisterForbiddenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckRegisterForbiddenResp) Reset() {
	*x = CheckRegisterForbiddenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRegisterForbiddenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRegisterForbiddenResp) ProtoMessage() {}

func (x *CheckRegisterForbiddenResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRegisterForbiddenResp.ProtoReflect.Descriptor instead.
func (*CheckRegisterForbiddenResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{64}
}

type CheckLoginForbiddenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip     string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip"`
	UserID string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
}

func (x *CheckLoginForbiddenReq) Reset() {
	*x = CheckLoginForbiddenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckLoginForbiddenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLoginForbiddenReq) ProtoMessage() {}

func (x *CheckLoginForbiddenReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLoginForbiddenReq.ProtoReflect.Descriptor instead.
func (*CheckLoginForbiddenReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{65}
}

func (x *CheckLoginForbiddenReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *CheckLoginForbiddenReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type CheckLoginForbiddenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckLoginForbiddenResp) Reset() {
	*x = CheckLoginForbiddenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckLoginForbiddenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLoginForbiddenResp) ProtoMessage() {}

func (x *CheckLoginForbiddenResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLoginForbiddenResp.ProtoReflect.Descriptor instead.
func (*CheckLoginForbiddenResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{66}
}

// ################### logout ###################
type CancellationUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason"`
}

func (x *CancellationUserReq) Reset() {
	*x = CancellationUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancellationUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancellationUserReq) ProtoMessage() {}

func (x *CancellationUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancellationUserReq.ProtoReflect.Descriptor instead.
func (*CancellationUserReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{67}
}

func (x *CancellationUserReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CancellationUserReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type CancellationUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancellationUserResp) Reset() {
	*x = CancellationUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancellationUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancellationUserResp) ProtoMessage() {}

func (x *CancellationUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancellationUserResp.ProtoReflect.Descriptor instead.
func (*CancellationUserResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{68}
}


type BlockUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason"`
}

func (x *BlockUserReq) Reset() {
	*x = BlockUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserReq) ProtoMessage() {}

func (x *BlockUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserReq.ProtoReflect.Descriptor instead.
func (*BlockUserReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{69}
}

func (x *BlockUserReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *BlockUserReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type BlockUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BlockUserResp) Reset() {
	*x = BlockUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserResp) ProtoMessage() {}

func (x *BlockUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserResp.ProtoReflect.Descriptor instead.
func (*BlockUserResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{70}
}

type UnblockUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs"`
}

func (x *UnblockUserReq) Reset() {
	*x = UnblockUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnblockUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockUserReq) ProtoMessage() {}

func (x *UnblockUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockUserReq.ProtoReflect.Descriptor instead.
func (*UnblockUserReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{71}
}

func (x *UnblockUserReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type UnblockUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnblockUserResp) Reset() {
	*x = UnblockUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnblockUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockUserResp) ProtoMessage() {}

func (x *UnblockUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockUserResp.ProtoReflect.Descriptor instead.
func (*UnblockUserResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{72}
}

type SearchBlockUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    string                   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword"`
	Pagination *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
}

func (x *SearchBlockUserReq) Reset() {
	*x = SearchBlockUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchBlockUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBlockUserReq) ProtoMessage() {}

func (x *SearchBlockUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBlockUserReq.ProtoReflect.Descriptor instead.
func (*SearchBlockUserReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{73}
}

func (x *SearchBlockUserReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchBlockUserReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type BlockUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Account     string `protobuf:"bytes,2,opt,name=account,proto3" json:"account"`
	PhoneNumber string `protobuf:"bytes,3,opt,name=phoneNumber,proto3" json:"phoneNumber"`
	AreaCode    string `protobuf:"bytes,4,opt,name=areaCode,proto3" json:"areaCode"`
	Email       string `protobuf:"bytes,5,opt,name=email,proto3" json:"email"`
	Nickname    string `protobuf:"bytes,6,opt,name=nickname,proto3" json:"nickname"`
	FaceURL     string `protobuf:"bytes,7,opt,name=faceURL,proto3" json:"faceURL"`
	Gender      int32  `protobuf:"varint,8,opt,name=gender,proto3" json:"gender"`
	Reason      string `protobuf:"bytes,9,opt,name=reason,proto3" json:"reason"`
	OpUserID    string `protobuf:"bytes,10,opt,name=opUserID,proto3" json:"opUserID"`
	CreateTime  int64  `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime"`
}

func (x *BlockUserInfo) Reset() {
	*x = BlockUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserInfo) ProtoMessage() {}

func (x *BlockUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserInfo.ProtoReflect.Descriptor instead.
func (*BlockUserInfo) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{74}
}

func (x *BlockUserInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *BlockUserInfo) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *BlockUserInfo) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *BlockUserInfo) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

func (x *BlockUserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *BlockUserInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *BlockUserInfo) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *BlockUserInfo) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *BlockUserInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *BlockUserInfo) GetOpUserID() string {
	if x != nil {
		return x.OpUserID
	}
	return ""
}

func (x *BlockUserInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type SearchBlockUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint32           `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Users []*BlockUserInfo `protobuf:"bytes,2,rep,name=users,proto3" json:"users"`
}

func (x *SearchBlockUserResp) Reset() {
	*x = SearchBlockUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchBlockUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBlockUserResp) ProtoMessage() {}

func (x *SearchBlockUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBlockUserResp.ProtoReflect.Descriptor instead.
func (*SearchBlockUserResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{75}
}

func (x *SearchBlockUserResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchBlockUserResp) GetUsers() []*BlockUserInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

type FindUserBlockInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs"`
}

func (x *FindUserBlockInfoReq) Reset() {
	*x = FindUserBlockInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserBlockInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserBlockInfoReq) ProtoMessage() {}

func (x *FindUserBlockInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserBlockInfoReq.ProtoReflect.Descriptor instead.
func (*FindUserBlockInfoReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{76}
}

func (x *FindUserBlockInfoReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type BlockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Reason     string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason"`
	OpUserID   string `protobuf:"bytes,3,opt,name=opUserID,proto3" json:"opUserID"`
	CreateTime int64  `protobuf:"varint,4,opt,name=createTime,proto3" json:"createTime"`
}

func (x *BlockInfo) Reset() {
	*x = BlockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockInfo) ProtoMessage() {}

func (x *BlockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockInfo.ProtoReflect.Descriptor instead.
func (*BlockInfo) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{77}
}

func (x *BlockInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *BlockInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *BlockInfo) GetOpUserID() string {
	if x != nil {
		return x.OpUserID
	}
	return ""
}

func (x *BlockInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type FindUserBlockInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks []*BlockInfo `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks"`
}

func (x *FindUserBlockInfoResp) Reset() {
	*x = FindUserBlockInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserBlockInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserBlockInfoResp) ProtoMessage() {}

func (x *FindUserBlockInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserBlockInfoResp.ProtoReflect.Descriptor instead.
func (*FindUserBlockInfoResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{78}
}

func (x *FindUserBlockInfoResp) GetBlocks() []*BlockInfo {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type CreateTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
	UserType int32  `protobuf:"varint,3,opt,name=userType,proto3" json:"userType"`
}

func (x *CreateTokenReq) Reset() {
	*x = CreateTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenReq) ProtoMessage() {}

func (x *CreateTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenReq.ProtoReflect.Descriptor instead.
func (*CreateTokenReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{79}
}

func (x *CreateTokenReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CreateTokenReq) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

type CreateTokenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token"`
}

func (x *CreateTokenResp) Reset() {
	*x = CreateTokenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenResp) ProtoMessage() {}

func (x *CreateTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenResp.ProtoReflect.Descriptor instead.
func (*CreateTokenResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{80}
}

func (x *CreateTokenResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ParseTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token"`
}

func (x *ParseTokenReq) Reset() {
	*x = ParseTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseTokenReq) ProtoMessage() {}

func (x *ParseTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseTokenReq.ProtoReflect.Descriptor instead.
func (*ParseTokenReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{81}
}

func (x *ParseTokenReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ParseTokenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID            string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
	UserType          int32  `protobuf:"varint,3,opt,name=userType,proto3" json:"userType"`
	ExpireTimeSeconds int64  `protobuf:"varint,4,opt,name=expireTimeSeconds,proto3" json:"expireTimeSeconds"`
}

func (x *ParseTokenResp) Reset() {
	*x = ParseTokenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseTokenResp) ProtoMessage() {}

func (x *ParseTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseTokenResp.ProtoReflect.Descriptor instead.
func (*ParseTokenResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{82}
}

func (x *ParseTokenResp) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ParseTokenResp) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *ParseTokenResp) GetExpireTimeSeconds() int64 {
	if x != nil {
		return x.ExpireTimeSeconds
	}
	return 0
}

type AddAppletReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	AppID      string `protobuf:"bytes,3,opt,name=appID,proto3" json:"appID"`
	Icon       string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon"`
	Url        string `protobuf:"bytes,5,opt,name=url,proto3" json:"url"`
	Md5        string `protobuf:"bytes,6,opt,name=md5,proto3" json:"md5"`
	Size       int64  `protobuf:"varint,7,opt,name=size,proto3" json:"size"`
	Version    string `protobuf:"bytes,8,opt,name=version,proto3" json:"version"`
	Priority   uint32 `protobuf:"varint,9,opt,name=priority,proto3" json:"priority"`
	Status     uint32 `protobuf:"varint,10,opt,name=status,proto3" json:"status"`
	CreateTime int64  `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime"`
}

func (x *AddAppletReq) Reset() {
	*x = AddAppletReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAppletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAppletReq) ProtoMessage() {}

func (x *AddAppletReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAppletReq.ProtoReflect.Descriptor instead.
func (*AddAppletReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{83}
}

func (x *AddAppletReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddAppletReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddAppletReq) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *AddAppletReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *AddAppletReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AddAppletReq) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *AddAppletReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AddAppletReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AddAppletReq) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *AddAppletReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AddAppletReq) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type AddAppletResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddAppletResp) Reset() {
	*x = AddAppletResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAppletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAppletResp) ProtoMessage() {}

func (x *AddAppletResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAppletResp.ProtoReflect.Descriptor instead.
func (*AddAppletResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{84}
}

type DelAppletReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppletIds []string `protobuf:"bytes,1,rep,name=appletIds,proto3" json:"appletIds"`
}

func (x *DelAppletReq) Reset() {
	*x = DelAppletReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelAppletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAppletReq) ProtoMessage() {}

func (x *DelAppletReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAppletReq.ProtoReflect.Descriptor instead.
func (*DelAppletReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{85}
}

func (x *DelAppletReq) GetAppletIds() []string {
	if x != nil {
		return x.AppletIds
	}
	return nil
}

type DelAppletResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelAppletResp) Reset() {
	*x = DelAppletResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelAppletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAppletResp) ProtoMessage() {}

func (x *DelAppletResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAppletResp.ProtoReflect.Descriptor instead.
func (*DelAppletResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{86}
}

type UpdateAppletReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name       *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	AppID      *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=appID,proto3" json:"appID"`
	Icon       *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon"`
	Url        *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=url,proto3" json:"url"`
	Md5        *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=md5,proto3" json:"md5"`
	Size       *wrapperspb.Int64Value  `protobuf:"bytes,7,opt,name=size,proto3" json:"size"`
	Version    *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=version,proto3" json:"version"`
	Priority   *wrapperspb.UInt32Value `protobuf:"bytes,9,opt,name=priority,proto3" json:"priority"`
	Status     *wrapperspb.UInt32Value `protobuf:"bytes,10,opt,name=status,proto3" json:"status"`
	CreateTime *wrapperspb.Int64Value  `protobuf:"bytes,11,opt,name=createTime,proto3" json:"createTime"`
}

func (x *UpdateAppletReq) Reset() {
	*x = UpdateAppletReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppletReq) ProtoMessage() {}

func (x *UpdateAppletReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppletReq.ProtoReflect.Descriptor instead.
func (*UpdateAppletReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{87}
}

func (x *UpdateAppletReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAppletReq) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UpdateAppletReq) GetAppID() *wrapperspb.StringValue {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *UpdateAppletReq) GetIcon() *wrapperspb.StringValue {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *UpdateAppletReq) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *UpdateAppletReq) GetMd5() *wrapperspb.StringValue {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *UpdateAppletReq) GetSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *UpdateAppletReq) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *UpdateAppletReq) GetPriority() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *UpdateAppletReq) GetStatus() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UpdateAppletReq) GetCreateTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type UpdateAppletResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAppletResp) Reset() {
	*x = UpdateAppletResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppletResp) ProtoMessage() {}

func (x *UpdateAppletResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppletResp.ProtoReflect.Descriptor instead.
func (*UpdateAppletResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{88}
}

type FindAppletReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAppletReq) Reset() {
	*x = FindAppletReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAppletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAppletReq) ProtoMessage() {}

func (x *FindAppletReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAppletReq.ProtoReflect.Descriptor instead.
func (*FindAppletReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{89}
}

type FindAppletResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Applets []*common.AppletInfo `protobuf:"bytes,1,rep,name=applets,proto3" json:"applets"`
}

func (x *FindAppletResp) Reset() {
	*x = FindAppletResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAppletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAppletResp) ProtoMessage() {}

func (x *FindAppletResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAppletResp.ProtoReflect.Descriptor instead.
func (*FindAppletResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{90}
}

func (x *FindAppletResp) GetApplets() []*common.AppletInfo {
	if x != nil {
		return x.Applets
	}
	return nil
}

type SearchAppletReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    string                   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword"`
	Pagination *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
}

func (x *SearchAppletReq) Reset() {
	*x = SearchAppletReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAppletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAppletReq) ProtoMessage() {}

func (x *SearchAppletReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAppletReq.ProtoReflect.Descriptor instead.
func (*SearchAppletReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{91}
}

func (x *SearchAppletReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchAppletReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type SearchAppletResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   uint32               `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Applets []*common.AppletInfo `protobuf:"bytes,2,rep,name=applets,proto3" json:"applets"`
}

func (x *SearchAppletResp) Reset() {
	*x = SearchAppletResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAppletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAppletResp) ProtoMessage() {}

func (x *SearchAppletResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAppletResp.ProtoReflect.Descriptor instead.
func (*SearchAppletResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{92}
}

func (x *SearchAppletResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchAppletResp) GetApplets() []*common.AppletInfo {
	if x != nil {
		return x.Applets
	}
	return nil
}

type SetClientConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config map[string]string `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetClientConfigReq) Reset() {
	*x = SetClientConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetClientConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetClientConfigReq) ProtoMessage() {}

func (x *SetClientConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetClientConfigReq.ProtoReflect.Descriptor instead.
func (*SetClientConfigReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{93}
}

func (x *SetClientConfigReq) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type SetClientConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetClientConfigResp) Reset() {
	*x = SetClientConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetClientConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetClientConfigResp) ProtoMessage() {}

func (x *SetClientConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetClientConfigResp.ProtoReflect.Descriptor instead.
func (*SetClientConfigResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{94}
}

type DelClientConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys"`
}

func (x *DelClientConfigReq) Reset() {
	*x = DelClientConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelClientConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelClientConfigReq) ProtoMessage() {}

func (x *DelClientConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelClientConfigReq.ProtoReflect.Descriptor instead.
func (*DelClientConfigReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{95}
}

func (x *DelClientConfigReq) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type DelClientConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelClientConfigResp) Reset() {
	*x = DelClientConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelClientConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelClientConfigResp) ProtoMessage() {}

func (x *DelClientConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelClientConfigResp.ProtoReflect.Descriptor instead.
func (*DelClientConfigResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{96}
}

type GetClientConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetClientConfigReq) Reset() {
	*x = GetClientConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClientConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientConfigReq) ProtoMessage() {}

func (x *GetClientConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientConfigReq.ProtoReflect.Descriptor instead.
func (*GetClientConfigReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{97}
}

type GetClientConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config map[string]string `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetClientConfigResp) Reset() {
	*x = GetClientConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClientConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientConfigResp) ProtoMessage() {}

func (x *GetClientConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientConfigResp.ProtoReflect.Descriptor instead.
func (*GetClientConfigResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{98}
}

func (x *GetClientConfigResp) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type GetUserTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
}

func (x *GetUserTokenReq) Reset() {
	*x = GetUserTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTokenReq) ProtoMessage() {}

func (x *GetUserTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTokenReq.ProtoReflect.Descriptor instead.
func (*GetUserTokenReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{99}
}

func (x *GetUserTokenReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetUserTokenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokensMap map[string]int32 `protobuf:"bytes,1,rep,name=tokensMap,proto3" json:"tokensMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetUserTokenResp) Reset() {
	*x = GetUserTokenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_admin_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTokenResp) ProtoMessage() {}

func (x *GetUserTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTokenResp.ProtoReflect.Descriptor instead.
func (*GetUserTokenResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{100}
}

func (x *GetUserTokenResp) GetTokensMap() map[string]int32 {
	if x != nil {
		return x.TokensMap
	}
	return nil
}

var File_admin_admin_proto protoreflect.FileDescriptor

var file_admin_admin_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x1a, 0x1b, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x73, 0x64, 0x6b, 0x77, 0x73, 0x2f, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x40, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52,
	0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x41,
	0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0xab, 0x02, 0x0a, 0x12, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x66,
	0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65,
	0x55, 0x52, 0x4c, 0x12, 0x38, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x22, 0x63, 0x0a, 0x13, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61,
	0x63, 0x65, 0x55, 0x52, 0x4c, 0x22, 0x2f, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x11, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x22,
	0x7c, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e,
	0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x19, 0x0a,
	0x17, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x58, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x16, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x0d, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x52, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22,
	0xcc, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61,
	0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63,
	0x65, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2f,
	0x0a, 0x13, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22,
	0x16, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2f, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x16, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x22, 0x31, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x73, 0x0a, 0x16, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x88, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x6b, 0x0a, 0x17, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x30, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x41, 0x64,
	0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x30, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x15, 0x0a, 0x13, 0x46, 0x69,
	0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x22, 0x32, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x73, 0x22, 0x72, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x0e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x77, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0x4a, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73,
	0x22, 0x2c, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x17,
	0x0a, 0x15, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x50, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x6e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x2d, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x50, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x05, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x05, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0x42, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x2c, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x17,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0xbc, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x22, 0xbc, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x76, 0x0a,
	0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x6a, 0x0a, 0x1a, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x36,
	0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x50, 0x52, 0x06,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x3a, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x22, 0x50, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x06,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x50, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x06, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x83, 0x01, 0x0a,
	0x0b, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x24, 0x0a, 0x0d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x66, 0x0a, 0x0e, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x41, 0x64, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x14, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x73,
	0x22, 0x51, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x3c, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x25, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73,
	0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2b, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x40, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46,
	0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x45,
	0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3e, 0x0a,
	0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x0f, 0x0a,
	0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2a,
	0x0a, 0x0e, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x55, 0x6e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x6f, 0x0a,
	0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3f, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb7,
	0x02, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x30, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x77, 0x0a, 0x09, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x06,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x44, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x27, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x25, 0x0a, 0x0d,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x72, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x82, 0x02, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x41,
	0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x0f, 0x0a, 0x0d,
	0x41, 0x64, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2c, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0xaf, 0x04, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x12,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x0f, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x22, 0x4a, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x73, 0x22,
	0x6c, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a,
	0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x74,
	0x73, 0x22, 0x95, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x65, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x28, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x22, 0x97, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x45, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x29, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x9d, 0x01, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x4b, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0x3c,
	0x0a, 0x0e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xe6, 0x1f, 0x0a,
	0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x53, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x0f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x0f,
	0x41, 0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41,
	0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x41, 0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x5f, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x59, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x10,
	0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x12, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x22, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x24, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x0f, 0x41, 0x64, 0x64,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64,
	0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x56, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x10, 0x46, 0x69, 0x6e,
	0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a,
	0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64,
	0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x5f, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x5c, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x5c, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x65,
	0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6b, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x62, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41,
	0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x24, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x11, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12,
	0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x49,
	0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x1f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x50, 0x46,
	0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x50,
	0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12,
	0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44,
	0x65, 0x6c, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x44, 0x65, 0x6c, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x59, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a,
	0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0b, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x56, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6b, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12,
	0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x62, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x47, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x09, 0x41,
	0x64, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x44, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x12, 0x1a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65,
	0x6c, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x41, 0x70, 0x70,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x70,
	0x70, 0x6c, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4d, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x12,
	0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56,
	0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x44, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x73, 0x64, 0x6b, 0x2f, 0x63, 0x68,
	0x61, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_admin_admin_proto_rawDescOnce sync.Once
	file_admin_admin_proto_rawDescData = file_admin_admin_proto_rawDesc
)

func file_admin_admin_proto_rawDescGZIP() []byte {
	file_admin_admin_proto_rawDescOnce.Do(func() {
		file_admin_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_admin_admin_proto_rawDescData)
	})
	return file_admin_admin_proto_rawDescData
}

var file_admin_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 104)
var file_admin_admin_proto_goTypes = []interface{}{
	(*LoginReq)(nil),                   // 0: openim.admin.LoginReq
	(*LoginResp)(nil),                  // 1: openim.admin.LoginResp
	(*AddAdminAccountReq)(nil),         // 2: openim.admin.AddAdminAccountReq
	(*AddAdminAccountResp)(nil),        // 3: openim.admin.AddAdminAccountResp
	(*AdminUpdateInfoReq)(nil),         // 4: openim.admin.AdminUpdateInfoReq
	(*AdminUpdateInfoResp)(nil),        // 5: openim.admin.AdminUpdateInfoResp
	(*ChangePasswordReq)(nil),          // 6: openim.admin.ChangePasswordReq
	(*ChangePasswordResp)(nil),         // 7: openim.admin.ChangePasswordResp
	(*GetAdminInfoReq)(nil),            // 8: openim.admin.GetAdminInfoReq
	(*ChangeAdminPasswordReq)(nil),     // 9: openim.admin.ChangeAdminPasswordReq
	(*ChangeAdminPasswordResp)(nil),    // 10: openim.admin.ChangeAdminPasswordResp
	(*DelAdminAccountReq)(nil),         // 11: openim.admin.DelAdminAccountReq
	(*DelAdminAccountResp)(nil),        // 12: openim.admin.DelAdminAccountResp
	(*SearchAdminAccountReq)(nil),      // 13: openim.admin.SearchAdminAccountReq
	(*SearchAdminAccountResp)(nil),     // 14: openim.admin.SearchAdminAccountResp
	(*GetAdminInfoResp)(nil),           // 15: openim.admin.GetAdminInfoResp
	(*AddDefaultFriendReq)(nil),        // 16: openim.admin.AddDefaultFriendReq
	(*AddDefaultFriendResp)(nil),       // 17: openim.admin.AddDefaultFriendResp
	(*DelDefaultFriendReq)(nil),        // 18: openim.admin.DelDefaultFriendReq
	(*DelDefaultFriendResp)(nil),       // 19: openim.admin.DelDefaultFriendResp
	(*FindDefaultFriendReq)(nil),       // 20: openim.admin.FindDefaultFriendReq
	(*FindDefaultFriendResp)(nil),      // 21: openim.admin.FindDefaultFriendResp
	(*SearchDefaultFriendReq)(nil),     // 22: openim.admin.SearchDefaultFriendReq
	(*DefaultFriendAttribute)(nil),     // 23: openim.admin.DefaultFriendAttribute
	(*SearchDefaultFriendResp)(nil),    // 24: openim.admin.SearchDefaultFriendResp
	(*AddDefaultGroupReq)(nil),         // 25: openim.admin.AddDefaultGroupReq
	(*AddDefaultGroupResp)(nil),        // 26: openim.admin.AddDefaultGroupResp
	(*DelDefaultGroupReq)(nil),         // 27: openim.admin.DelDefaultGroupReq
	(*DelDefaultGroupResp)(nil),        // 28: openim.admin.DelDefaultGroupResp
	(*FindDefaultGroupReq)(nil),        // 29: openim.admin.FindDefaultGroupReq
	(*FindDefaultGroupResp)(nil),       // 30: openim.admin.FindDefaultGroupResp
	(*SearchDefaultGroupReq)(nil),      // 31: openim.admin.SearchDefaultGroupReq
	(*GroupAttribute)(nil),             // 32: openim.admin.GroupAttribute
	(*SearchDefaultGroupResp)(nil),     // 33: openim.admin.SearchDefaultGroupResp
	(*AddInvitationCodeReq)(nil),       // 34: openim.admin.AddInvitationCodeReq
	(*AddInvitationCodeResp)(nil),      // 35: openim.admin.AddInvitationCodeResp
	(*GenInvitationCodeReq)(nil),       // 36: openim.admin.GenInvitationCodeReq
	(*GenInvitationCodeResp)(nil),      // 37: openim.admin.GenInvitationCodeResp
	(*FindInvitationCodeReq)(nil),      // 38: openim.admin.FindInvitationCodeReq
	(*FindInvitationCodeResp)(nil),     // 39: openim.admin.FindInvitationCodeResp
	(*UseInvitationCodeReq)(nil),       // 40: openim.admin.UseInvitationCodeReq
	(*UseInvitationCodeResp)(nil),      // 41: openim.admin.UseInvitationCodeResp
	(*DelInvitationCodeReq)(nil),       // 42: openim.admin.DelInvitationCodeReq
	(*DelInvitationCodeResp)(nil),      // 43: openim.admin.DelInvitationCodeResp
	(*InvitationRegister)(nil),         // 44: openim.admin.InvitationRegister
	(*SearchInvitationCodeReq)(nil),    // 45: openim.admin.SearchInvitationCodeReq
	(*SearchInvitationCodeResp)(nil),   // 46: openim.admin.SearchInvitationCodeResp
	(*SearchUserIPLimitLoginReq)(nil),  // 47: openim.admin.SearchUserIPLimitLoginReq
	(*LimitUserLoginIP)(nil),           // 48: openim.admin.LimitUserLoginIP
	(*SearchUserIPLimitLoginResp)(nil), // 49: openim.admin.SearchUserIPLimitLoginResp
	(*UserIPLimitLogin)(nil),           // 50: openim.admin.UserIPLimitLogin
	(*AddUserIPLimitLoginReq)(nil),     // 51: openim.admin.AddUserIPLimitLoginReq
	(*AddUserIPLimitLoginResp)(nil),    // 52: openim.admin.AddUserIPLimitLoginResp
	(*DelUserIPLimitLoginReq)(nil),     // 53: openim.admin.DelUserIPLimitLoginReq
	(*DelUserIPLimitLoginResp)(nil),    // 54: openim.admin.DelUserIPLimitLoginResp
	(*IPForbidden)(nil),                // 55: openim.admin.IPForbidden
	(*IPForbiddenAdd)(nil),             // 56: openim.admin.IPForbiddenAdd
	(*SearchIPForbiddenReq)(nil),       // 57: openim.admin.SearchIPForbiddenReq
	(*SearchIPForbiddenResp)(nil),      // 58: openim.admin.SearchIPForbiddenResp
	(*AddIPForbiddenReq)(nil),          // 59: openim.admin.AddIPForbiddenReq
	(*AddIPForbiddenResp)(nil),         // 60: openim.admin.AddIPForbiddenResp
	(*DelIPForbiddenReq)(nil),          // 61: openim.admin.DelIPForbiddenReq
	(*DelIPForbiddenResp)(nil),         // 62: openim.admin.DelIPForbiddenResp
	(*CheckRegisterForbiddenReq)(nil),  // 63: openim.admin.CheckRegisterForbiddenReq
	(*CheckRegisterForbiddenResp)(nil), // 64: openim.admin.CheckRegisterForbiddenResp
	(*CheckLoginForbiddenReq)(nil),     // 65: openim.admin.CheckLoginForbiddenReq
	(*CheckLoginForbiddenResp)(nil),    // 66: openim.admin.CheckLoginForbiddenResp
	(*CancellationUserReq)(nil),        // 67: openim.admin.CancellationUserReq
	(*CancellationUserResp)(nil),       // 68: openim.admin.CancellationUserResp
	(*BlockUserReq)(nil),               // 69: openim.admin.BlockUserReq
	(*BlockUserResp)(nil),              // 70: openim.admin.BlockUserResp
	(*UnblockUserReq)(nil),             // 71: openim.admin.UnblockUserReq
	(*UnblockUserResp)(nil),            // 72: openim.admin.UnblockUserResp
	(*SearchBlockUserReq)(nil),         // 73: openim.admin.SearchBlockUserReq
	(*BlockUserInfo)(nil),              // 74: openim.admin.BlockUserInfo
	(*SearchBlockUserResp)(nil),        // 75: openim.admin.SearchBlockUserResp
	(*FindUserBlockInfoReq)(nil),       // 76: openim.admin.FindUserBlockInfoReq
	(*BlockInfo)(nil),                  // 77: openim.admin.BlockInfo
	(*FindUserBlockInfoResp)(nil),      // 78: openim.admin.FindUserBlockInfoResp
	(*CreateTokenReq)(nil),             // 79: openim.admin.CreateTokenReq
	(*CreateTokenResp)(nil),            // 80: openim.admin.CreateTokenResp
	(*ParseTokenReq)(nil),              // 81: openim.admin.ParseTokenReq
	(*ParseTokenResp)(nil),             // 82: openim.admin.ParseTokenResp
	(*AddAppletReq)(nil),               // 83: openim.admin.AddAppletReq
	(*AddAppletResp)(nil),              // 84: openim.admin.AddAppletResp
	(*DelAppletReq)(nil),               // 85: openim.admin.DelAppletReq
	(*DelAppletResp)(nil),              // 86: openim.admin.DelAppletResp
	(*UpdateAppletReq)(nil),            // 87: openim.admin.UpdateAppletReq
	(*UpdateAppletResp)(nil),           // 88: openim.admin.UpdateAppletResp
	(*FindAppletReq)(nil),              // 89: openim.admin.FindAppletReq
	(*FindAppletResp)(nil),             // 90: openim.admin.FindAppletResp
	(*SearchAppletReq)(nil),            // 91: openim.admin.SearchAppletReq
	(*SearchAppletResp)(nil),           // 92: openim.admin.SearchAppletResp
	(*SetClientConfigReq)(nil),         // 93: openim.admin.SetClientConfigReq
	(*SetClientConfigResp)(nil),        // 94: openim.admin.SetClientConfigResp
	(*DelClientConfigReq)(nil),         // 95: openim.admin.DelClientConfigReq
	(*DelClientConfigResp)(nil),        // 96: openim.admin.DelClientConfigResp
	(*GetClientConfigReq)(nil),         // 97: openim.admin.GetClientConfigReq
	(*GetClientConfigResp)(nil),        // 98: openim.admin.GetClientConfigResp
	(*GetUserTokenReq)(nil),            // 99: openim.admin.GetUserTokenReq
	(*GetUserTokenResp)(nil),           // 100: openim.admin.GetUserTokenResp
	nil,                                // 101: openim.admin.SetClientConfigReq.ConfigEntry
	nil,                                // 102: openim.admin.GetClientConfigResp.ConfigEntry
	nil,                                // 103: openim.admin.GetUserTokenResp.TokensMapEntry
	(*wrapperspb.StringValue)(nil),     // 104: openim.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),      // 105: openim.protobuf.Int32Value
	(*sdkws.RequestPagination)(nil),    // 106: openim.sdkws.RequestPagination
	(*common.UserPublicInfo)(nil),      // 107: openim.chat.common.UserPublicInfo
	(*sdkws.GroupInfo)(nil),            // 108: openim.sdkws.GroupInfo
	(*wrapperspb.Int64Value)(nil),      // 109: openim.protobuf.Int64Value
	(*wrapperspb.UInt32Value)(nil),     // 110: openim.protobuf.UInt32Value
	(*common.AppletInfo)(nil),          // 111: openim.chat.common.AppletInfo
}
var file_admin_admin_proto_depIdxs = []int32{
	104, // 0: openim.admin.AdminUpdateInfoReq.account:type_name -> openim.protobuf.StringValue
	104, // 1: openim.admin.AdminUpdateInfoReq.password:type_name -> openim.protobuf.StringValue
	104, // 2: openim.admin.AdminUpdateInfoReq.faceURL:type_name -> openim.protobuf.StringValue
	104, // 3: openim.admin.AdminUpdateInfoReq.nickname:type_name -> openim.protobuf.StringValue
	105, // 4: openim.admin.AdminUpdateInfoReq.level:type_name -> openim.protobuf.Int32Value
	106, // 5: openim.admin.SearchAdminAccountReq.pagination:type_name -> openim.sdkws.RequestPagination
	15,  // 6: openim.admin.SearchAdminAccountResp.adminAccounts:type_name -> openim.admin.GetAdminInfoResp
	106, // 7: openim.admin.SearchDefaultFriendReq.pagination:type_name -> openim.sdkws.RequestPagination
	107, // 8: openim.admin.DefaultFriendAttribute.user:type_name -> openim.chat.common.UserPublicInfo
	23,  // 9: openim.admin.SearchDefaultFriendResp.users:type_name -> openim.admin.DefaultFriendAttribute
	106, // 10: openim.admin.SearchDefaultGroupReq.pagination:type_name -> openim.sdkws.RequestPagination
	108, // 11: openim.admin.GroupAttribute.group:type_name -> openim.sdkws.GroupInfo
	44,  // 12: openim.admin.FindInvitationCodeResp.codes:type_name -> openim.admin.InvitationRegister
	107, // 13: openim.admin.InvitationRegister.usedUser:type_name -> openim.chat.common.UserPublicInfo
	106, // 14: openim.admin.SearchInvitationCodeReq.pagination:type_name -> openim.sdkws.RequestPagination
	44,  // 15: openim.admin.SearchInvitationCodeResp.list:type_name -> openim.admin.InvitationRegister
	106, // 16: openim.admin.SearchUserIPLimitLoginReq.pagination:type_name -> openim.sdkws.RequestPagination
	107, // 17: openim.admin.LimitUserLoginIP.user:type_name -> openim.chat.common.UserPublicInfo
	48,  // 18: openim.admin.SearchUserIPLimitLoginResp.limits:type_name -> openim.admin.LimitUserLoginIP
	50,  // 19: openim.admin.AddUserIPLimitLoginReq.limits:type_name -> openim.admin.UserIPLimitLogin
	50,  // 20: openim.admin.DelUserIPLimitLoginReq.limits:type_name -> openim.admin.UserIPLimitLogin
	106, // 21: openim.admin.SearchIPForbiddenReq.pagination:type_name -> openim.sdkws.RequestPagination
	55,  // 22: openim.admin.SearchIPForbiddenResp.forbiddens:type_name -> openim.admin.IPForbidden
	56,  // 23: openim.admin.AddIPForbiddenReq.forbiddens:type_name -> openim.admin.IPForbiddenAdd
	106, // 24: openim.admin.SearchBlockUserReq.pagination:type_name -> openim.sdkws.RequestPagination
	74,  // 25: openim.admin.SearchBlockUserResp.users:type_name -> openim.admin.BlockUserInfo
	77,  // 26: openim.admin.FindUserBlockInfoResp.blocks:type_name -> openim.admin.BlockInfo
	104, // 27: openim.admin.UpdateAppletReq.name:type_name -> openim.protobuf.StringValue
	104, // 28: openim.admin.UpdateAppletReq.appID:type_name -> openim.protobuf.StringValue
	104, // 29: openim.admin.UpdateAppletReq.icon:type_name -> openim.protobuf.StringValue
	104, // 30: openim.admin.UpdateAppletReq.url:type_name -> openim.protobuf.StringValue
	104, // 31: openim.admin.UpdateAppletReq.md5:type_name -> openim.protobuf.StringValue
	109, // 32: openim.admin.UpdateAppletReq.size:type_name -> openim.protobuf.Int64Value
	104, // 33: openim.admin.UpdateAppletReq.version:type_name -> openim.protobuf.StringValue
	110, // 34: openim.admin.UpdateAppletReq.priority:type_name -> openim.protobuf.UInt32Value
	110, // 35: openim.admin.UpdateAppletReq.status:type_name -> openim.protobuf.UInt32Value
	109, // 36: openim.admin.UpdateAppletReq.createTime:type_name -> openim.protobuf.Int64Value
	111, // 37: openim.admin.FindAppletResp.applets:type_name -> openim.chat.common.AppletInfo
	106, // 38: openim.admin.SearchAppletReq.pagination:type_name -> openim.sdkws.RequestPagination
	111, // 39: openim.admin.SearchAppletResp.applets:type_name -> openim.chat.common.AppletInfo
	101, // 40: openim.admin.SetClientConfigReq.config:type_name -> openim.admin.SetClientConfigReq.ConfigEntry
	102, // 41: openim.admin.GetClientConfigResp.config:type_name -> openim.admin.GetClientConfigResp.ConfigEntry
	103, // 42: openim.admin.GetUserTokenResp.tokensMap:type_name -> openim.admin.GetUserTokenResp.TokensMapEntry
	0,   // 43: openim.admin.admin.Login:input_type -> openim.admin.LoginReq
	6,   // 44: openim.admin.admin.ChangePassword:input_type -> openim.admin.ChangePasswordReq
	4,   // 45: openim.admin.admin.AdminUpdateInfo:input_type -> openim.admin.AdminUpdateInfoReq
	8,   // 46: openim.admin.admin.GetAdminInfo:input_type -> openim.admin.GetAdminInfoReq
	2,   // 47: openim.admin.admin.AddAdminAccount:input_type -> openim.admin.AddAdminAccountReq
	9,   // 48: openim.admin.admin.ChangeAdminPassword:input_type -> openim.admin.ChangeAdminPasswordReq
	11,  // 49: openim.admin.admin.DelAdminAccount:input_type -> openim.admin.DelAdminAccountReq
	13,  // 50: openim.admin.admin.SearchAdminAccount:input_type -> openim.admin.SearchAdminAccountReq
	16,  // 51: openim.admin.admin.AddDefaultFriend:input_type -> openim.admin.AddDefaultFriendReq
	18,  // 52: openim.admin.admin.DelDefaultFriend:input_type -> openim.admin.DelDefaultFriendReq
	20,  // 53: openim.admin.admin.FindDefaultFriend:input_type -> openim.admin.FindDefaultFriendReq
	22,  // 54: openim.admin.admin.SearchDefaultFriend:input_type -> openim.admin.SearchDefaultFriendReq
	25,  // 55: openim.admin.admin.AddDefaultGroup:input_type -> openim.admin.AddDefaultGroupReq
	27,  // 56: openim.admin.admin.DelDefaultGroup:input_type -> openim.admin.DelDefaultGroupReq
	29,  // 57: openim.admin.admin.FindDefaultGroup:input_type -> openim.admin.FindDefaultGroupReq
	31,  // 58: openim.admin.admin.SearchDefaultGroup:input_type -> openim.admin.SearchDefaultGroupReq
	34,  // 59: openim.admin.admin.AddInvitationCode:input_type -> openim.admin.AddInvitationCodeReq
	36,  // 60: openim.admin.admin.GenInvitationCode:input_type -> openim.admin.GenInvitationCodeReq
	38,  // 61: openim.admin.admin.FindInvitationCode:input_type -> openim.admin.FindInvitationCodeReq
	40,  // 62: openim.admin.admin.UseInvitationCode:input_type -> openim.admin.UseInvitationCodeReq
	42,  // 63: openim.admin.admin.DelInvitationCode:input_type -> openim.admin.DelInvitationCodeReq
	45,  // 64: openim.admin.admin.SearchInvitationCode:input_type -> openim.admin.SearchInvitationCodeReq
	47,  // 65: openim.admin.admin.SearchUserIPLimitLogin:input_type -> openim.admin.SearchUserIPLimitLoginReq
	51,  // 66: openim.admin.admin.AddUserIPLimitLogin:input_type -> openim.admin.AddUserIPLimitLoginReq
	53,  // 67: openim.admin.admin.DelUserIPLimitLogin:input_type -> openim.admin.DelUserIPLimitLoginReq
	57,  // 68: openim.admin.admin.SearchIPForbidden:input_type -> openim.admin.SearchIPForbiddenReq
	59,  // 69: openim.admin.admin.AddIPForbidden:input_type -> openim.admin.AddIPForbiddenReq
	61,  // 70: openim.admin.admin.DelIPForbidden:input_type -> openim.admin.DelIPForbiddenReq
	67,  // 71: openim.admin.admin.CancellationUser:input_type -> openim.admin.CancellationUserReq
	69,  // 72: openim.admin.admin.BlockUser:input_type -> openim.admin.BlockUserReq
	71,  // 73: openim.admin.admin.UnblockUser:input_type -> openim.admin.UnblockUserReq
	73,  // 74: openim.admin.admin.SearchBlockUser:input_type -> openim.admin.SearchBlockUserReq
	76,  // 75: openim.admin.admin.FindUserBlockInfo:input_type -> openim.admin.FindUserBlockInfoReq
	63,  // 76: openim.admin.admin.CheckRegisterForbidden:input_type -> openim.admin.CheckRegisterForbiddenReq
	65,  // 77: openim.admin.admin.CheckLoginForbidden:input_type -> openim.admin.CheckLoginForbiddenReq
	79,  // 78: openim.admin.admin.CreateToken:input_type -> openim.admin.CreateTokenReq
	81,  // 79: openim.admin.admin.ParseToken:input_type -> openim.admin.ParseTokenReq
	83,  // 80: openim.admin.admin.AddApplet:input_type -> openim.admin.AddAppletReq
	85,  // 81: openim.admin.admin.DelApplet:input_type -> openim.admin.DelAppletReq
	87,  // 82: openim.admin.admin.UpdateApplet:input_type -> openim.admin.UpdateAppletReq
	89,  // 83: openim.admin.admin.FindApplet:input_type -> openim.admin.FindAppletReq
	91,  // 84: openim.admin.admin.SearchApplet:input_type -> openim.admin.SearchAppletReq
	97,  // 85: openim.admin.admin.GetClientConfig:input_type -> openim.admin.GetClientConfigReq
	93,  // 86: openim.admin.admin.SetClientConfig:input_type -> openim.admin.SetClientConfigReq
	95,  // 87: openim.admin.admin.DelClientConfig:input_type -> openim.admin.DelClientConfigReq
	99,  // 88: openim.admin.admin.GetUserToken:input_type -> openim.admin.GetUserTokenReq
	1,   // 89: openim.admin.admin.Login:output_type -> openim.admin.LoginResp
	7,   // 90: openim.admin.admin.ChangePassword:output_type -> openim.admin.ChangePasswordResp
	5,   // 91: openim.admin.admin.AdminUpdateInfo:output_type -> openim.admin.AdminUpdateInfoResp
	15,  // 92: openim.admin.admin.GetAdminInfo:output_type -> openim.admin.GetAdminInfoResp
	3,   // 93: openim.admin.admin.AddAdminAccount:output_type -> openim.admin.AddAdminAccountResp
	10,  // 94: openim.admin.admin.ChangeAdminPassword:output_type -> openim.admin.ChangeAdminPasswordResp
	12,  // 95: openim.admin.admin.DelAdminAccount:output_type -> openim.admin.DelAdminAccountResp
	14,  // 96: openim.admin.admin.SearchAdminAccount:output_type -> openim.admin.SearchAdminAccountResp
	17,  // 97: openim.admin.admin.AddDefaultFriend:output_type -> openim.admin.AddDefaultFriendResp
	19,  // 98: openim.admin.admin.DelDefaultFriend:output_type -> openim.admin.DelDefaultFriendResp
	21,  // 99: openim.admin.admin.FindDefaultFriend:output_type -> openim.admin.FindDefaultFriendResp
	24,  // 100: openim.admin.admin.SearchDefaultFriend:output_type -> openim.admin.SearchDefaultFriendResp
	26,  // 101: openim.admin.admin.AddDefaultGroup:output_type -> openim.admin.AddDefaultGroupResp
	28,  // 102: openim.admin.admin.DelDefaultGroup:output_type -> openim.admin.DelDefaultGroupResp
	30,  // 103: openim.admin.admin.FindDefaultGroup:output_type -> openim.admin.FindDefaultGroupResp
	33,  // 104: openim.admin.admin.SearchDefaultGroup:output_type -> openim.admin.SearchDefaultGroupResp
	35,  // 105: openim.admin.admin.AddInvitationCode:output_type -> openim.admin.AddInvitationCodeResp
	37,  // 106: openim.admin.admin.GenInvitationCode:output_type -> openim.admin.GenInvitationCodeResp
	39,  // 107: openim.admin.admin.FindInvitationCode:output_type -> openim.admin.FindInvitationCodeResp
	41,  // 108: openim.admin.admin.UseInvitationCode:output_type -> openim.admin.UseInvitationCodeResp
	43,  // 109: openim.admin.admin.DelInvitationCode:output_type -> openim.admin.DelInvitationCodeResp
	46,  // 110: openim.admin.admin.SearchInvitationCode:output_type -> openim.admin.SearchInvitationCodeResp
	49,  // 111: openim.admin.admin.SearchUserIPLimitLogin:output_type -> openim.admin.SearchUserIPLimitLoginResp
	52,  // 112: openim.admin.admin.AddUserIPLimitLogin:output_type -> openim.admin.AddUserIPLimitLoginResp
	54,  // 113: openim.admin.admin.DelUserIPLimitLogin:output_type -> openim.admin.DelUserIPLimitLoginResp
	58,  // 114: openim.admin.admin.SearchIPForbidden:output_type -> openim.admin.SearchIPForbiddenResp
	60,  // 115: openim.admin.admin.AddIPForbidden:output_type -> openim.admin.AddIPForbiddenResp
	62,  // 116: openim.admin.admin.DelIPForbidden:output_type -> openim.admin.DelIPForbiddenResp
	68,  // 117: openim.admin.admin.CancellationUser:output_type -> openim.admin.CancellationUserResp
	70,  // 118: openim.admin.admin.BlockUser:output_type -> openim.admin.BlockUserResp
	72,  // 119: openim.admin.admin.UnblockUser:output_type -> openim.admin.UnblockUserResp
	75,  // 120: openim.admin.admin.SearchBlockUser:output_type -> openim.admin.SearchBlockUserResp
	78,  // 121: openim.admin.admin.FindUserBlockInfo:output_type -> openim.admin.FindUserBlockInfoResp
	64,  // 122: openim.admin.admin.CheckRegisterForbidden:output_type -> openim.admin.CheckRegisterForbiddenResp
	66,  // 123: openim.admin.admin.CheckLoginForbidden:output_type -> openim.admin.CheckLoginForbiddenResp
	80,  // 124: openim.admin.admin.CreateToken:output_type -> openim.admin.CreateTokenResp
	82,  // 125: openim.admin.admin.ParseToken:output_type -> openim.admin.ParseTokenResp
	84,  // 126: openim.admin.admin.AddApplet:output_type -> openim.admin.AddAppletResp
	86,  // 127: openim.admin.admin.DelApplet:output_type -> openim.admin.DelAppletResp
	88,  // 128: openim.admin.admin.UpdateApplet:output_type -> openim.admin.UpdateAppletResp
	90,  // 129: openim.admin.admin.FindApplet:output_type -> openim.admin.FindAppletResp
	92,  // 130: openim.admin.admin.SearchApplet:output_type -> openim.admin.SearchAppletResp
	98,  // 131: openim.admin.admin.GetClientConfig:output_type -> openim.admin.GetClientConfigResp
	94,  // 132: openim.admin.admin.SetClientConfig:output_type -> openim.admin.SetClientConfigResp
	96,  // 133: openim.admin.admin.DelClientConfig:output_type -> openim.admin.DelClientConfigResp
	100, // 134: openim.admin.admin.GetUserToken:output_type -> openim.admin.GetUserTokenResp
	89,  // [89:135] is the sub-list for method output_type
	43,  // [43:89] is the sub-list for method input_type
	43,  // [43:43] is the sub-list for extension type_name
	43,  // [43:43] is the sub-list for extension extendee
	0,   // [0:43] is the sub-list for field type_name
}

func init() { file_admin_admin_proto_init() }
func file_admin_admin_proto_init() {
	if File_admin_admin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_admin_admin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAdminAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAdminAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePasswordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePasswordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdminInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeAdminPasswordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeAdminPasswordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelAdminAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelAdminAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchAdminAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchAdminAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdminInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDefaultFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDefaultFriendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelDefaultFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelDefaultFriendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindDefaultFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindDefaultFriendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDefaultFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultFriendAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDefaultFriendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDefaultGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDefaultGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelDefaultGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelDefaultGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindDefaultGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindDefaultGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDefaultGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDefaultGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInvitationCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInvitationCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenInvitationCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenInvitationCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindInvitationCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindInvitationCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseInvitationCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseInvitationCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelInvitationCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelInvitationCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvitationRegister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchInvitationCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchInvitationCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserIPLimitLoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitUserLoginIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserIPLimitLoginResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIPLimitLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserIPLimitLoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserIPLimitLoginResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelUserIPLimitLoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelUserIPLimitLoginResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPForbidden); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPForbiddenAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchIPForbiddenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchIPForbiddenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIPForbiddenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIPForbiddenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelIPForbiddenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelIPForbiddenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRegisterForbiddenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRegisterForbiddenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckLoginForbiddenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckLoginForbiddenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancellationUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancellationUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnblockUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnblockUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchBlockUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchBlockUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindUserBlockInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindUserBlockInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseTokenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAppletReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAppletResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelAppletReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelAppletResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppletReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppletResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAppletReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAppletResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchAppletReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchAppletResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetClientConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetClientConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelClientConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelClientConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClientConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClientConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_admin_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserTokenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_admin_admin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   104,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_admin_admin_proto_goTypes,
		DependencyIndexes: file_admin_admin_proto_depIdxs,
		MessageInfos:      file_admin_admin_proto_msgTypes,
	}.Build()
	File_admin_admin_proto = out.File
	file_admin_admin_proto_rawDesc = nil
	file_admin_admin_proto_goTypes = nil
	file_admin_admin_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminClient interface {
	// Login
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error)
	AdminUpdateInfo(ctx context.Context, in *AdminUpdateInfoReq, opts ...grpc.CallOption) (*AdminUpdateInfoResp, error)
	// Get administrator information
	GetAdminInfo(ctx context.Context, in *GetAdminInfoReq, opts ...grpc.CallOption) (*GetAdminInfoResp, error)
	AddAdminAccount(ctx context.Context, in *AddAdminAccountReq, opts ...grpc.CallOption) (*AddAdminAccountResp, error)
	ChangeAdminPassword(ctx context.Context, in *ChangeAdminPasswordReq, opts ...grpc.CallOption) (*ChangeAdminPasswordResp, error)
	DelAdminAccount(ctx context.Context, in *DelAdminAccountReq, opts ...grpc.CallOption) (*DelAdminAccountResp, error)
	SearchAdminAccount(ctx context.Context, in *SearchAdminAccountReq, opts ...grpc.CallOption) (*SearchAdminAccountResp, error)
	// Add Remove Get default friend list on registration
	AddDefaultFriend(ctx context.Context, in *AddDefaultFriendReq, opts ...grpc.CallOption) (*AddDefaultFriendResp, error)
	DelDefaultFriend(ctx context.Context, in *DelDefaultFriendReq, opts ...grpc.CallOption) (*DelDefaultFriendResp, error)
	FindDefaultFriend(ctx context.Context, in *FindDefaultFriendReq, opts ...grpc.CallOption) (*FindDefaultFriendResp, error)
	SearchDefaultFriend(ctx context.Context, in *SearchDefaultFriendReq, opts ...grpc.CallOption) (*SearchDefaultFriendResp, error)
	AddDefaultGroup(ctx context.Context, in *AddDefaultGroupReq, opts ...grpc.CallOption) (*AddDefaultGroupResp, error)
	DelDefaultGroup(ctx context.Context, in *DelDefaultGroupReq, opts ...grpc.CallOption) (*DelDefaultGroupResp, error)
	FindDefaultGroup(ctx context.Context, in *FindDefaultGroupReq, opts ...grpc.CallOption) (*FindDefaultGroupResp, error)
	SearchDefaultGroup(ctx context.Context, in *SearchDefaultGroupReq, opts ...grpc.CallOption) (*SearchDefaultGroupResp, error)
	// Invitation Code Generate Query Get
	AddInvitationCode(ctx context.Context, in *AddInvitationCodeReq, opts ...grpc.CallOption) (*AddInvitationCodeResp, error)
	GenInvitationCode(ctx context.Context, in *GenInvitationCodeReq, opts ...grpc.CallOption) (*GenInvitationCodeResp, error)
	FindInvitationCode(ctx context.Context, in *FindInvitationCodeReq, opts ...grpc.CallOption) (*FindInvitationCodeResp, error)
	UseInvitationCode(ctx context.Context, in *UseInvitationCodeReq, opts ...grpc.CallOption) (*UseInvitationCodeResp, error)
	DelInvitationCode(ctx context.Context, in *DelInvitationCodeReq, opts ...grpc.CallOption) (*DelInvitationCodeResp, error)
	SearchInvitationCode(ctx context.Context, in *SearchInvitationCodeReq, opts ...grpc.CallOption) (*SearchInvitationCodeResp, error)
	// User login ip limit Query Add Remove
	SearchUserIPLimitLogin(ctx context.Context, in *SearchUserIPLimitLoginReq, opts ...grpc.CallOption) (*SearchUserIPLimitLoginResp, error)
	AddUserIPLimitLogin(ctx context.Context, in *AddUserIPLimitLoginReq, opts ...grpc.CallOption) (*AddUserIPLimitLoginResp, error)
	DelUserIPLimitLogin(ctx context.Context, in *DelUserIPLimitLoginReq, opts ...grpc.CallOption) (*DelUserIPLimitLoginResp, error)
	// Prohibit users from registering at certain ip Query Add Remove
	SearchIPForbidden(ctx context.Context, in *SearchIPForbiddenReq, opts ...grpc.CallOption) (*SearchIPForbiddenResp, error)
	AddIPForbidden(ctx context.Context, in *AddIPForbiddenReq, opts ...grpc.CallOption) (*AddIPForbiddenResp, error)
	DelIPForbidden(ctx context.Context, in *DelIPForbiddenReq, opts ...grpc.CallOption) (*DelIPForbiddenResp, error)
	// User Management Related Add Block/Unblock Pull
	CancellationUser(ctx context.Context, in *CancellationUserReq, opts ...grpc.CallOption) (*CancellationUserResp, error)
	BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error)
	UnblockUser(ctx context.Context, in *UnblockUserReq, opts ...grpc.CallOption) (*UnblockUserResp, error)
	SearchBlockUser(ctx context.Context, in *SearchBlockUserReq, opts ...grpc.CallOption) (*SearchBlockUserResp, error)
	FindUserBlockInfo(ctx context.Context, in *FindUserBlockInfoReq, opts ...grpc.CallOption) (*FindUserBlockInfoResp, error)
	CheckRegisterForbidden(ctx context.Context, in *CheckRegisterForbiddenReq, opts ...grpc.CallOption) (*CheckRegisterForbiddenResp, error)
	CheckLoginForbidden(ctx context.Context, in *CheckLoginForbiddenReq, opts ...grpc.CallOption) (*CheckLoginForbiddenResp, error)
	// create token
	CreateToken(ctx context.Context, in *CreateTokenReq, opts ...grpc.CallOption) (*CreateTokenResp, error)
	// parse token
	ParseToken(ctx context.Context, in *ParseTokenReq, opts ...grpc.CallOption) (*ParseTokenResp, error)
	// app
	AddApplet(ctx context.Context, in *AddAppletReq, opts ...grpc.CallOption) (*AddAppletResp, error)
	DelApplet(ctx context.Context, in *DelAppletReq, opts ...grpc.CallOption) (*DelAppletResp, error)
	UpdateApplet(ctx context.Context, in *UpdateAppletReq, opts ...grpc.CallOption) (*UpdateAppletResp, error)
	FindApplet(ctx context.Context, in *FindAppletReq, opts ...grpc.CallOption) (*FindAppletResp, error)
	SearchApplet(ctx context.Context, in *SearchAppletReq, opts ...grpc.CallOption) (*SearchAppletResp, error)
	// Client Configuration
	GetClientConfig(ctx context.Context, in *GetClientConfigReq, opts ...grpc.CallOption) (*GetClientConfigResp, error)
	SetClientConfig(ctx context.Context, in *SetClientConfigReq, opts ...grpc.CallOption) (*SetClientConfigResp, error)
	DelClientConfig(ctx context.Context, in *DelClientConfigReq, opts ...grpc.CallOption) (*DelClientConfigResp, error)
	GetUserToken(ctx context.Context, in *GetUserTokenReq, opts ...grpc.CallOption) (*GetUserTokenResp, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error) {
	out := new(ChangePasswordResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AdminUpdateInfo(ctx context.Context, in *AdminUpdateInfoReq, opts ...grpc.CallOption) (*AdminUpdateInfoResp, error) {
	out := new(AdminUpdateInfoResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/AdminUpdateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetAdminInfo(ctx context.Context, in *GetAdminInfoReq, opts ...grpc.CallOption) (*GetAdminInfoResp, error) {
	out := new(GetAdminInfoResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/GetAdminInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddAdminAccount(ctx context.Context, in *AddAdminAccountReq, opts ...grpc.CallOption) (*AddAdminAccountResp, error) {
	out := new(AddAdminAccountResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/AddAdminAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ChangeAdminPassword(ctx context.Context, in *ChangeAdminPasswordReq, opts ...grpc.CallOption) (*ChangeAdminPasswordResp, error) {
	out := new(ChangeAdminPasswordResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/ChangeAdminPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelAdminAccount(ctx context.Context, in *DelAdminAccountReq, opts ...grpc.CallOption) (*DelAdminAccountResp, error) {
	out := new(DelAdminAccountResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/DelAdminAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchAdminAccount(ctx context.Context, in *SearchAdminAccountReq, opts ...grpc.CallOption) (*SearchAdminAccountResp, error) {
	out := new(SearchAdminAccountResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/SearchAdminAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddDefaultFriend(ctx context.Context, in *AddDefaultFriendReq, opts ...grpc.CallOption) (*AddDefaultFriendResp, error) {
	out := new(AddDefaultFriendResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/AddDefaultFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelDefaultFriend(ctx context.Context, in *DelDefaultFriendReq, opts ...grpc.CallOption) (*DelDefaultFriendResp, error) {
	out := new(DelDefaultFriendResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/DelDefaultFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) FindDefaultFriend(ctx context.Context, in *FindDefaultFriendReq, opts ...grpc.CallOption) (*FindDefaultFriendResp, error) {
	out := new(FindDefaultFriendResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/FindDefaultFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchDefaultFriend(ctx context.Context, in *SearchDefaultFriendReq, opts ...grpc.CallOption) (*SearchDefaultFriendResp, error) {
	out := new(SearchDefaultFriendResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/SearchDefaultFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddDefaultGroup(ctx context.Context, in *AddDefaultGroupReq, opts ...grpc.CallOption) (*AddDefaultGroupResp, error) {
	out := new(AddDefaultGroupResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/AddDefaultGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelDefaultGroup(ctx context.Context, in *DelDefaultGroupReq, opts ...grpc.CallOption) (*DelDefaultGroupResp, error) {
	out := new(DelDefaultGroupResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/DelDefaultGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) FindDefaultGroup(ctx context.Context, in *FindDefaultGroupReq, opts ...grpc.CallOption) (*FindDefaultGroupResp, error) {
	out := new(FindDefaultGroupResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/FindDefaultGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchDefaultGroup(ctx context.Context, in *SearchDefaultGroupReq, opts ...grpc.CallOption) (*SearchDefaultGroupResp, error) {
	out := new(SearchDefaultGroupResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/SearchDefaultGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddInvitationCode(ctx context.Context, in *AddInvitationCodeReq, opts ...grpc.CallOption) (*AddInvitationCodeResp, error) {
	out := new(AddInvitationCodeResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/AddInvitationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GenInvitationCode(ctx context.Context, in *GenInvitationCodeReq, opts ...grpc.CallOption) (*GenInvitationCodeResp, error) {
	out := new(GenInvitationCodeResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/GenInvitationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) FindInvitationCode(ctx context.Context, in *FindInvitationCodeReq, opts ...grpc.CallOption) (*FindInvitationCodeResp, error) {
	out := new(FindInvitationCodeResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/FindInvitationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UseInvitationCode(ctx context.Context, in *UseInvitationCodeReq, opts ...grpc.CallOption) (*UseInvitationCodeResp, error) {
	out := new(UseInvitationCodeResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/UseInvitationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelInvitationCode(ctx context.Context, in *DelInvitationCodeReq, opts ...grpc.CallOption) (*DelInvitationCodeResp, error) {
	out := new(DelInvitationCodeResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/DelInvitationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchInvitationCode(ctx context.Context, in *SearchInvitationCodeReq, opts ...grpc.CallOption) (*SearchInvitationCodeResp, error) {
	out := new(SearchInvitationCodeResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/SearchInvitationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchUserIPLimitLogin(ctx context.Context, in *SearchUserIPLimitLoginReq, opts ...grpc.CallOption) (*SearchUserIPLimitLoginResp, error) {
	out := new(SearchUserIPLimitLoginResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/SearchUserIPLimitLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddUserIPLimitLogin(ctx context.Context, in *AddUserIPLimitLoginReq, opts ...grpc.CallOption) (*AddUserIPLimitLoginResp, error) {
	out := new(AddUserIPLimitLoginResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/AddUserIPLimitLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelUserIPLimitLogin(ctx context.Context, in *DelUserIPLimitLoginReq, opts ...grpc.CallOption) (*DelUserIPLimitLoginResp, error) {
	out := new(DelUserIPLimitLoginResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/DelUserIPLimitLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchIPForbidden(ctx context.Context, in *SearchIPForbiddenReq, opts ...grpc.CallOption) (*SearchIPForbiddenResp, error) {
	out := new(SearchIPForbiddenResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/SearchIPForbidden", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddIPForbidden(ctx context.Context, in *AddIPForbiddenReq, opts ...grpc.CallOption) (*AddIPForbiddenResp, error) {
	out := new(AddIPForbiddenResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/AddIPForbidden", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelIPForbidden(ctx context.Context, in *DelIPForbiddenReq, opts ...grpc.CallOption) (*DelIPForbiddenResp, error) {
	out := new(DelIPForbiddenResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/DelIPForbidden", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CancellationUser(ctx context.Context, in *CancellationUserReq, opts ...grpc.CallOption) (*CancellationUserResp, error) {
	out := new(CancellationUserResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/CancellationUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error) {
	out := new(BlockUserResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/BlockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UnblockUser(ctx context.Context, in *UnblockUserReq, opts ...grpc.CallOption) (*UnblockUserResp, error) {
	out := new(UnblockUserResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/UnblockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchBlockUser(ctx context.Context, in *SearchBlockUserReq, opts ...grpc.CallOption) (*SearchBlockUserResp, error) {
	out := new(SearchBlockUserResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/SearchBlockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) FindUserBlockInfo(ctx context.Context, in *FindUserBlockInfoReq, opts ...grpc.CallOption) (*FindUserBlockInfoResp, error) {
	out := new(FindUserBlockInfoResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/FindUserBlockInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CheckRegisterForbidden(ctx context.Context, in *CheckRegisterForbiddenReq, opts ...grpc.CallOption) (*CheckRegisterForbiddenResp, error) {
	out := new(CheckRegisterForbiddenResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/CheckRegisterForbidden", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CheckLoginForbidden(ctx context.Context, in *CheckLoginForbiddenReq, opts ...grpc.CallOption) (*CheckLoginForbiddenResp, error) {
	out := new(CheckLoginForbiddenResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/CheckLoginForbidden", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateToken(ctx context.Context, in *CreateTokenReq, opts ...grpc.CallOption) (*CreateTokenResp, error) {
	out := new(CreateTokenResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/CreateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ParseToken(ctx context.Context, in *ParseTokenReq, opts ...grpc.CallOption) (*ParseTokenResp, error) {
	out := new(ParseTokenResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/ParseToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddApplet(ctx context.Context, in *AddAppletReq, opts ...grpc.CallOption) (*AddAppletResp, error) {
	out := new(AddAppletResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/AddApplet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelApplet(ctx context.Context, in *DelAppletReq, opts ...grpc.CallOption) (*DelAppletResp, error) {
	out := new(DelAppletResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/DelApplet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateApplet(ctx context.Context, in *UpdateAppletReq, opts ...grpc.CallOption) (*UpdateAppletResp, error) {
	out := new(UpdateAppletResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/UpdateApplet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) FindApplet(ctx context.Context, in *FindAppletReq, opts ...grpc.CallOption) (*FindAppletResp, error) {
	out := new(FindAppletResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/FindApplet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchApplet(ctx context.Context, in *SearchAppletReq, opts ...grpc.CallOption) (*SearchAppletResp, error) {
	out := new(SearchAppletResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/SearchApplet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetClientConfig(ctx context.Context, in *GetClientConfigReq, opts ...grpc.CallOption) (*GetClientConfigResp, error) {
	out := new(GetClientConfigResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/GetClientConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SetClientConfig(ctx context.Context, in *SetClientConfigReq, opts ...grpc.CallOption) (*SetClientConfigResp, error) {
	out := new(SetClientConfigResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/SetClientConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelClientConfig(ctx context.Context, in *DelClientConfigReq, opts ...grpc.CallOption) (*DelClientConfigResp, error) {
	out := new(DelClientConfigResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/DelClientConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetUserToken(ctx context.Context, in *GetUserTokenReq, opts ...grpc.CallOption) (*GetUserTokenResp, error) {
	out := new(GetUserTokenResp)
	err := c.cc.Invoke(ctx, "/openim.admin.admin/GetUserToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
type AdminServer interface {
	// Login
	Login(context.Context, *LoginReq) (*LoginResp, error)
	ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error)
	AdminUpdateInfo(context.Context, *AdminUpdateInfoReq) (*AdminUpdateInfoResp, error)
	// Get administrator information
	GetAdminInfo(context.Context, *GetAdminInfoReq) (*GetAdminInfoResp, error)
	AddAdminAccount(context.Context, *AddAdminAccountReq) (*AddAdminAccountResp, error)
	ChangeAdminPassword(context.Context, *ChangeAdminPasswordReq) (*ChangeAdminPasswordResp, error)
	DelAdminAccount(context.Context, *DelAdminAccountReq) (*DelAdminAccountResp, error)
	SearchAdminAccount(context.Context, *SearchAdminAccountReq) (*SearchAdminAccountResp, error)
	// Add Remove Get default friend list on registration
	AddDefaultFriend(context.Context, *AddDefaultFriendReq) (*AddDefaultFriendResp, error)
	DelDefaultFriend(context.Context, *DelDefaultFriendReq) (*DelDefaultFriendResp, error)
	FindDefaultFriend(context.Context, *FindDefaultFriendReq) (*FindDefaultFriendResp, error)
	SearchDefaultFriend(context.Context, *SearchDefaultFriendReq) (*SearchDefaultFriendResp, error)
	AddDefaultGroup(context.Context, *AddDefaultGroupReq) (*AddDefaultGroupResp, error)
	DelDefaultGroup(context.Context, *DelDefaultGroupReq) (*DelDefaultGroupResp, error)
	FindDefaultGroup(context.Context, *FindDefaultGroupReq) (*FindDefaultGroupResp, error)
	SearchDefaultGroup(context.Context, *SearchDefaultGroupReq) (*SearchDefaultGroupResp, error)
	// Invitation Code Generate Query Get
	AddInvitationCode(context.Context, *AddInvitationCodeReq) (*AddInvitationCodeResp, error)
	GenInvitationCode(context.Context, *GenInvitationCodeReq) (*GenInvitationCodeResp, error)
	FindInvitationCode(context.Context, *FindInvitationCodeReq) (*FindInvitationCodeResp, error)
	UseInvitationCode(context.Context, *UseInvitationCodeReq) (*UseInvitationCodeResp, error)
	DelInvitationCode(context.Context, *DelInvitationCodeReq) (*DelInvitationCodeResp, error)
	SearchInvitationCode(context.Context, *SearchInvitationCodeReq) (*SearchInvitationCodeResp, error)
	// User login ip limit Query Add Remove
	SearchUserIPLimitLogin(context.Context, *SearchUserIPLimitLoginReq) (*SearchUserIPLimitLoginResp, error)
	AddUserIPLimitLogin(context.Context, *AddUserIPLimitLoginReq) (*AddUserIPLimitLoginResp, error)
	DelUserIPLimitLogin(context.Context, *DelUserIPLimitLoginReq) (*DelUserIPLimitLoginResp, error)
	// Prohibit users from registering at certain ip Query Add Remove
	SearchIPForbidden(context.Context, *SearchIPForbiddenReq) (*SearchIPForbiddenResp, error)
	AddIPForbidden(context.Context, *AddIPForbiddenReq) (*AddIPForbiddenResp, error)
	DelIPForbidden(context.Context, *DelIPForbiddenReq) (*DelIPForbiddenResp, error)
	// User Management Related Add Block/Unblock Pull
	CancellationUser(context.Context, *CancellationUserReq) (*CancellationUserResp, error)
	BlockUser(context.Context, *BlockUserReq) (*BlockUserResp, error)
	UnblockUser(context.Context, *UnblockUserReq) (*UnblockUserResp, error)
	SearchBlockUser(context.Context, *SearchBlockUserReq) (*SearchBlockUserResp, error)
	FindUserBlockInfo(context.Context, *FindUserBlockInfoReq) (*FindUserBlockInfoResp, error)
	CheckRegisterForbidden(context.Context, *CheckRegisterForbiddenReq) (*CheckRegisterForbiddenResp, error)
	CheckLoginForbidden(context.Context, *CheckLoginForbiddenReq) (*CheckLoginForbiddenResp, error)
	// create token
	CreateToken(context.Context, *CreateTokenReq) (*CreateTokenResp, error)
	// parse token
	ParseToken(context.Context, *ParseTokenReq) (*ParseTokenResp, error)
	// app
	AddApplet(context.Context, *AddAppletReq) (*AddAppletResp, error)
	DelApplet(context.Context, *DelAppletReq) (*DelAppletResp, error)
	UpdateApplet(context.Context, *UpdateAppletReq) (*UpdateAppletResp, error)
	FindApplet(context.Context, *FindAppletReq) (*FindAppletResp, error)
	SearchApplet(context.Context, *SearchAppletReq) (*SearchAppletResp, error)
	// Client Configuration
	GetClientConfig(context.Context, *GetClientConfigReq) (*GetClientConfigResp, error)
	SetClientConfig(context.Context, *SetClientConfigReq) (*SetClientConfigResp, error)
	DelClientConfig(context.Context, *DelClientConfigReq) (*DelClientConfigResp, error)
	GetUserToken(context.Context, *GetUserTokenReq) (*GetUserTokenResp, error)
}

// UnimplementedAdminServer can be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (*UnimplementedAdminServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedAdminServer) ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (*UnimplementedAdminServer) AdminUpdateInfo(context.Context, *AdminUpdateInfoReq) (*AdminUpdateInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateInfo not implemented")
}
func (*UnimplementedAdminServer) GetAdminInfo(context.Context, *GetAdminInfoReq) (*GetAdminInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminInfo not implemented")
}
func (*UnimplementedAdminServer) AddAdminAccount(context.Context, *AddAdminAccountReq) (*AddAdminAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdminAccount not implemented")
}
func (*UnimplementedAdminServer) ChangeAdminPassword(context.Context, *ChangeAdminPasswordReq) (*ChangeAdminPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAdminPassword not implemented")
}
func (*UnimplementedAdminServer) DelAdminAccount(context.Context, *DelAdminAccountReq) (*DelAdminAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAdminAccount not implemented")
}
func (*UnimplementedAdminServer) SearchAdminAccount(context.Context, *SearchAdminAccountReq) (*SearchAdminAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAdminAccount not implemented")
}
func (*UnimplementedAdminServer) AddDefaultFriend(context.Context, *AddDefaultFriendReq) (*AddDefaultFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDefaultFriend not implemented")
}
func (*UnimplementedAdminServer) DelDefaultFriend(context.Context, *DelDefaultFriendReq) (*DelDefaultFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDefaultFriend not implemented")
}
func (*UnimplementedAdminServer) FindDefaultFriend(context.Context, *FindDefaultFriendReq) (*FindDefaultFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDefaultFriend not implemented")
}
func (*UnimplementedAdminServer) SearchDefaultFriend(context.Context, *SearchDefaultFriendReq) (*SearchDefaultFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDefaultFriend not implemented")
}
func (*UnimplementedAdminServer) AddDefaultGroup(context.Context, *AddDefaultGroupReq) (*AddDefaultGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDefaultGroup not implemented")
}
func (*UnimplementedAdminServer) DelDefaultGroup(context.Context, *DelDefaultGroupReq) (*DelDefaultGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDefaultGroup not implemented")
}
func (*UnimplementedAdminServer) FindDefaultGroup(context.Context, *FindDefaultGroupReq) (*FindDefaultGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDefaultGroup not implemented")
}
func (*UnimplementedAdminServer) SearchDefaultGroup(context.Context, *SearchDefaultGroupReq) (*SearchDefaultGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDefaultGroup not implemented")
}
func (*UnimplementedAdminServer) AddInvitationCode(context.Context, *AddInvitationCodeReq) (*AddInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInvitationCode not implemented")
}
func (*UnimplementedAdminServer) GenInvitationCode(context.Context, *GenInvitationCodeReq) (*GenInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenInvitationCode not implemented")
}
func (*UnimplementedAdminServer) FindInvitationCode(context.Context, *FindInvitationCodeReq) (*FindInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindInvitationCode not implemented")
}
func (*UnimplementedAdminServer) UseInvitationCode(context.Context, *UseInvitationCodeReq) (*UseInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseInvitationCode not implemented")
}
func (*UnimplementedAdminServer) DelInvitationCode(context.Context, *DelInvitationCodeReq) (*DelInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelInvitationCode not implemented")
}
func (*UnimplementedAdminServer) SearchInvitationCode(context.Context, *SearchInvitationCodeReq) (*SearchInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchInvitationCode not implemented")
}
func (*UnimplementedAdminServer) SearchUserIPLimitLogin(context.Context, *SearchUserIPLimitLoginReq) (*SearchUserIPLimitLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserIPLimitLogin not implemented")
}
func (*UnimplementedAdminServer) AddUserIPLimitLogin(context.Context, *AddUserIPLimitLoginReq) (*AddUserIPLimitLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserIPLimitLogin not implemented")
}
func (*UnimplementedAdminServer) DelUserIPLimitLogin(context.Context, *DelUserIPLimitLoginReq) (*DelUserIPLimitLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserIPLimitLogin not implemented")
}
func (*UnimplementedAdminServer) SearchIPForbidden(context.Context, *SearchIPForbiddenReq) (*SearchIPForbiddenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchIPForbidden not implemented")
}
func (*UnimplementedAdminServer) AddIPForbidden(context.Context, *AddIPForbiddenReq) (*AddIPForbiddenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIPForbidden not implemented")
}
func (*UnimplementedAdminServer) DelIPForbidden(context.Context, *DelIPForbiddenReq) (*DelIPForbiddenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelIPForbidden not implemented")
}
func (*UnimplementedAdminServer) CancellationUser(context.Context, *CancellationUserReq) (*CancellationUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancellationUser not implemented")
}
func (*UnimplementedAdminServer) BlockUser(context.Context, *BlockUserReq) (*BlockUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUser not implemented")
}
func (*UnimplementedAdminServer) UnblockUser(context.Context, *UnblockUserReq) (*UnblockUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockUser not implemented")
}
func (*UnimplementedAdminServer) SearchBlockUser(context.Context, *SearchBlockUserReq) (*SearchBlockUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBlockUser not implemented")
}
func (*UnimplementedAdminServer) FindUserBlockInfo(context.Context, *FindUserBlockInfoReq) (*FindUserBlockInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserBlockInfo not implemented")
}
func (*UnimplementedAdminServer) CheckRegisterForbidden(context.Context, *CheckRegisterForbiddenReq) (*CheckRegisterForbiddenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRegisterForbidden not implemented")
}
func (*UnimplementedAdminServer) CheckLoginForbidden(context.Context, *CheckLoginForbiddenReq) (*CheckLoginForbiddenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLoginForbidden not implemented")
}
func (*UnimplementedAdminServer) CreateToken(context.Context, *CreateTokenReq) (*CreateTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (*UnimplementedAdminServer) ParseToken(context.Context, *ParseTokenReq) (*ParseTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseToken not implemented")
}
func (*UnimplementedAdminServer) AddApplet(context.Context, *AddAppletReq) (*AddAppletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddApplet not implemented")
}
func (*UnimplementedAdminServer) DelApplet(context.Context, *DelAppletReq) (*DelAppletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelApplet not implemented")
}
func (*UnimplementedAdminServer) UpdateApplet(context.Context, *UpdateAppletReq) (*UpdateAppletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplet not implemented")
}
func (*UnimplementedAdminServer) FindApplet(context.Context, *FindAppletReq) (*FindAppletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindApplet not implemented")
}
func (*UnimplementedAdminServer) SearchApplet(context.Context, *SearchAppletReq) (*SearchAppletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchApplet not implemented")
}
func (*UnimplementedAdminServer) GetClientConfig(context.Context, *GetClientConfigReq) (*GetClientConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientConfig not implemented")
}
func (*UnimplementedAdminServer) SetClientConfig(context.Context, *SetClientConfigReq) (*SetClientConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClientConfig not implemented")
}
func (*UnimplementedAdminServer) DelClientConfig(context.Context, *DelClientConfigReq) (*DelClientConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelClientConfig not implemented")
}
func (*UnimplementedAdminServer) GetUserToken(context.Context, *GetUserTokenReq) (*GetUserTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserToken not implemented")
}

func RegisterAdminServer(s *grpc.Server, srv AdminServer) {
	s.RegisterService(&_Admin_serviceDesc, srv)
}

func _Admin_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ChangePassword(ctx, req.(*ChangePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AdminUpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AdminUpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/AdminUpdateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AdminUpdateInfo(ctx, req.(*AdminUpdateInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetAdminInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetAdminInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/GetAdminInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetAdminInfo(ctx, req.(*GetAdminInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddAdminAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAdminAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddAdminAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/AddAdminAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddAdminAccount(ctx, req.(*AddAdminAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ChangeAdminPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAdminPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ChangeAdminPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/ChangeAdminPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ChangeAdminPassword(ctx, req.(*ChangeAdminPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelAdminAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAdminAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelAdminAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/DelAdminAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelAdminAccount(ctx, req.(*DelAdminAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchAdminAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAdminAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchAdminAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/SearchAdminAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchAdminAccount(ctx, req.(*SearchAdminAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddDefaultFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDefaultFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddDefaultFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/AddDefaultFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddDefaultFriend(ctx, req.(*AddDefaultFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelDefaultFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDefaultFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelDefaultFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/DelDefaultFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelDefaultFriend(ctx, req.(*DelDefaultFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_FindDefaultFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDefaultFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).FindDefaultFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/FindDefaultFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).FindDefaultFriend(ctx, req.(*FindDefaultFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchDefaultFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDefaultFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchDefaultFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/SearchDefaultFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchDefaultFriend(ctx, req.(*SearchDefaultFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddDefaultGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDefaultGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddDefaultGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/AddDefaultGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddDefaultGroup(ctx, req.(*AddDefaultGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelDefaultGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDefaultGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelDefaultGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/DelDefaultGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelDefaultGroup(ctx, req.(*DelDefaultGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_FindDefaultGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDefaultGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).FindDefaultGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/FindDefaultGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).FindDefaultGroup(ctx, req.(*FindDefaultGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchDefaultGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDefaultGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchDefaultGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/SearchDefaultGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchDefaultGroup(ctx, req.(*SearchDefaultGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/AddInvitationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddInvitationCode(ctx, req.(*AddInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GenInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GenInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/GenInvitationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GenInvitationCode(ctx, req.(*GenInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_FindInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).FindInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/FindInvitationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).FindInvitationCode(ctx, req.(*FindInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UseInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UseInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/UseInvitationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UseInvitationCode(ctx, req.(*UseInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/DelInvitationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelInvitationCode(ctx, req.(*DelInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/SearchInvitationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchInvitationCode(ctx, req.(*SearchInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchUserIPLimitLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserIPLimitLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchUserIPLimitLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/SearchUserIPLimitLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchUserIPLimitLogin(ctx, req.(*SearchUserIPLimitLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddUserIPLimitLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserIPLimitLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddUserIPLimitLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/AddUserIPLimitLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddUserIPLimitLogin(ctx, req.(*AddUserIPLimitLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelUserIPLimitLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserIPLimitLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelUserIPLimitLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/DelUserIPLimitLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelUserIPLimitLogin(ctx, req.(*DelUserIPLimitLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchIPForbidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchIPForbiddenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchIPForbidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/SearchIPForbidden",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchIPForbidden(ctx, req.(*SearchIPForbiddenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddIPForbidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIPForbiddenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddIPForbidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/AddIPForbidden",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddIPForbidden(ctx, req.(*AddIPForbiddenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelIPForbidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelIPForbiddenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelIPForbidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/DelIPForbidden",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelIPForbidden(ctx, req.(*DelIPForbiddenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CancellationUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancellationUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CancellationUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/CancellationUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CancellationUser(ctx, req.(*CancellationUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/BlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).BlockUser(ctx, req.(*BlockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UnblockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UnblockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/UnblockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UnblockUser(ctx, req.(*UnblockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchBlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBlockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchBlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/SearchBlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchBlockUser(ctx, req.(*SearchBlockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_FindUserBlockInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserBlockInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).FindUserBlockInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/FindUserBlockInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).FindUserBlockInfo(ctx, req.(*FindUserBlockInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CheckRegisterForbidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRegisterForbiddenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CheckRegisterForbidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/CheckRegisterForbidden",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CheckRegisterForbidden(ctx, req.(*CheckRegisterForbiddenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CheckLoginForbidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLoginForbiddenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CheckLoginForbidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/CheckLoginForbidden",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CheckLoginForbidden(ctx, req.(*CheckLoginForbiddenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/CreateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateToken(ctx, req.(*CreateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ParseToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ParseToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/ParseToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ParseToken(ctx, req.(*ParseTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddApplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddApplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/AddApplet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddApplet(ctx, req.(*AddAppletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelApplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAppletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelApplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/DelApplet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelApplet(ctx, req.(*DelAppletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateApplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateApplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/UpdateApplet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateApplet(ctx, req.(*UpdateAppletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_FindApplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAppletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).FindApplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/FindApplet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).FindApplet(ctx, req.(*FindAppletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchApplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAppletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchApplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/SearchApplet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchApplet(ctx, req.(*SearchAppletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/GetClientConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetClientConfig(ctx, req.(*GetClientConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SetClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetClientConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SetClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/SetClientConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SetClientConfig(ctx, req.(*SetClientConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelClientConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/DelClientConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelClientConfig(ctx, req.(*DelClientConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.admin.admin/GetUserToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetUserToken(ctx, req.(*GetUserTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Admin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openim.admin.admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Admin_Login_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Admin_ChangePassword_Handler,
		},
		{
			MethodName: "AdminUpdateInfo",
			Handler:    _Admin_AdminUpdateInfo_Handler,
		},
		{
			MethodName: "GetAdminInfo",
			Handler:    _Admin_GetAdminInfo_Handler,
		},
		{
			MethodName: "AddAdminAccount",
			Handler:    _Admin_AddAdminAccount_Handler,
		},
		{
			MethodName: "ChangeAdminPassword",
			Handler:    _Admin_ChangeAdminPassword_Handler,
		},
		{
			MethodName: "DelAdminAccount",
			Handler:    _Admin_DelAdminAccount_Handler,
		},
		{
			MethodName: "SearchAdminAccount",
			Handler:    _Admin_SearchAdminAccount_Handler,
		},
		{
			MethodName: "AddDefaultFriend",
			Handler:    _Admin_AddDefaultFriend_Handler,
		},
		{
			MethodName: "DelDefaultFriend",
			Handler:    _Admin_DelDefaultFriend_Handler,
		},
		{
			MethodName: "FindDefaultFriend",
			Handler:    _Admin_FindDefaultFriend_Handler,
		},
		{
			MethodName: "SearchDefaultFriend",
			Handler:    _Admin_SearchDefaultFriend_Handler,
		},
		{
			MethodName: "AddDefaultGroup",
			Handler:    _Admin_AddDefaultGroup_Handler,
		},
		{
			MethodName: "DelDefaultGroup",
			Handler:    _Admin_DelDefaultGroup_Handler,
		},
		{
			MethodName: "FindDefaultGroup",
			Handler:    _Admin_FindDefaultGroup_Handler,
		},
		{
			MethodName: "SearchDefaultGroup",
			Handler:    _Admin_SearchDefaultGroup_Handler,
		},
		{
			MethodName: "AddInvitationCode",
			Handler:    _Admin_AddInvitationCode_Handler,
		},
		{
			MethodName: "GenInvitationCode",
			Handler:    _Admin_GenInvitationCode_Handler,
		},
		{
			MethodName: "FindInvitationCode",
			Handler:    _Admin_FindInvitationCode_Handler,
		},
		{
			MethodName: "UseInvitationCode",
			Handler:    _Admin_UseInvitationCode_Handler,
		},
		{
			MethodName: "DelInvitationCode",
			Handler:    _Admin_DelInvitationCode_Handler,
		},
		{
			MethodName: "SearchInvitationCode",
			Handler:    _Admin_SearchInvitationCode_Handler,
		},
		{
			MethodName: "SearchUserIPLimitLogin",
			Handler:    _Admin_SearchUserIPLimitLogin_Handler,
		},
		{
			MethodName: "AddUserIPLimitLogin",
			Handler:    _Admin_AddUserIPLimitLogin_Handler,
		},
		{
			MethodName: "DelUserIPLimitLogin",
			Handler:    _Admin_DelUserIPLimitLogin_Handler,
		},
		{
			MethodName: "SearchIPForbidden",
			Handler:    _Admin_SearchIPForbidden_Handler,
		},
		{
			MethodName: "AddIPForbidden",
			Handler:    _Admin_AddIPForbidden_Handler,
		},
		{
			MethodName: "DelIPForbidden",
			Handler:    _Admin_DelIPForbidden_Handler,
		},
		{
			MethodName: "CancellationUser",
			Handler:    _Admin_CancellationUser_Handler,
		},
		{
			MethodName: "BlockUser",
			Handler:    _Admin_BlockUser_Handler,
		},
		{
			MethodName: "UnblockUser",
			Handler:    _Admin_UnblockUser_Handler,
		},
		{
			MethodName: "SearchBlockUser",
			Handler:    _Admin_SearchBlockUser_Handler,
		},
		{
			MethodName: "FindUserBlockInfo",
			Handler:    _Admin_FindUserBlockInfo_Handler,
		},
		{
			MethodName: "CheckRegisterForbidden",
			Handler:    _Admin_CheckRegisterForbidden_Handler,
		},
		{
			MethodName: "CheckLoginForbidden",
			Handler:    _Admin_CheckLoginForbidden_Handler,
		},
		{
			MethodName: "CreateToken",
			Handler:    _Admin_CreateToken_Handler,
		},
		{
			MethodName: "ParseToken",
			Handler:    _Admin_ParseToken_Handler,
		},
		{
			MethodName: "AddApplet",
			Handler:    _Admin_AddApplet_Handler,
		},
		{
			MethodName: "DelApplet",
			Handler:    _Admin_DelApplet_Handler,
		},
		{
			MethodName: "UpdateApplet",
			Handler:    _Admin_UpdateApplet_Handler,
		},
		{
			MethodName: "FindApplet",
			Handler:    _Admin_FindApplet_Handler,
		},
		{
			MethodName: "SearchApplet",
			Handler:    _Admin_SearchApplet_Handler,
		},
		{
			MethodName: "GetClientConfig",
			Handler:    _Admin_GetClientConfig_Handler,
		},
		{
			MethodName: "SetClientConfig",
			Handler:    _Admin_SetClientConfig_Handler,
		},
		{
			MethodName: "DelClientConfig",
			Handler:    _Admin_DelClientConfig_Handler,
		},
		{
			MethodName: "GetUserToken",
			Handler:    _Admin_GetUserToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/admin.proto",
}
